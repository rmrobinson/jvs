// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DeviceUpdate_Action int32

const (
	DeviceUpdate_ADDED   DeviceUpdate_Action = 0
	DeviceUpdate_CHANGED DeviceUpdate_Action = 1
	DeviceUpdate_REMOVED DeviceUpdate_Action = 2
)

var DeviceUpdate_Action_name = map[int32]string{
	0: "ADDED",
	1: "CHANGED",
	2: "REMOVED",
}
var DeviceUpdate_Action_value = map[string]int32{
	"ADDED":   0,
	"CHANGED": 1,
	"REMOVED": 2,
}

func (x DeviceUpdate_Action) String() string {
	return proto.EnumName(DeviceUpdate_Action_name, int32(x))
}
func (DeviceUpdate_Action) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{8, 0} }

type DeviceConfig struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *DeviceConfig) Reset()                    { *m = DeviceConfig{} }
func (m *DeviceConfig) String() string            { return proto.CompactTextString(m) }
func (*DeviceConfig) ProtoMessage()               {}
func (*DeviceConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *DeviceConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceConfig) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type DeviceState struct {
	IsReachable bool                          `protobuf:"varint,1,opt,name=is_reachable,json=isReachable" json:"is_reachable,omitempty"`
	Binary      *DeviceState_BinaryState      `protobuf:"bytes,11,opt,name=binary" json:"binary,omitempty"`
	Range       *DeviceState_RangeState       `protobuf:"bytes,12,opt,name=range" json:"range,omitempty"`
	ColorRgb    *DeviceState_RGBState         `protobuf:"bytes,13,opt,name=color_rgb,json=colorRgb" json:"color_rgb,omitempty"`
	Speed       *DeviceState_SpeedState       `protobuf:"bytes,14,opt,name=speed" json:"speed,omitempty"`
	Input       *DeviceState_InputState       `protobuf:"bytes,15,opt,name=input" json:"input,omitempty"`
	Control     *DeviceState_ControlState     `protobuf:"bytes,16,opt,name=control" json:"control,omitempty"`
	Temperature *DeviceState_TemperatureState `protobuf:"bytes,17,opt,name=temperature" json:"temperature,omitempty"`
	Button      []*DeviceState_ButtonState    `protobuf:"bytes,18,rep,name=button" json:"button,omitempty"`
	Presence    *DeviceState_PresenceState    `protobuf:"bytes,19,opt,name=presence" json:"presence,omitempty"`
	Version     string                        `protobuf:"bytes,100,opt,name=version" json:"version,omitempty"`
}

func (m *DeviceState) Reset()                    { *m = DeviceState{} }
func (m *DeviceState) String() string            { return proto.CompactTextString(m) }
func (*DeviceState) ProtoMessage()               {}
func (*DeviceState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *DeviceState) GetIsReachable() bool {
	if m != nil {
		return m.IsReachable
	}
	return false
}

func (m *DeviceState) GetBinary() *DeviceState_BinaryState {
	if m != nil {
		return m.Binary
	}
	return nil
}

func (m *DeviceState) GetRange() *DeviceState_RangeState {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *DeviceState) GetColorRgb() *DeviceState_RGBState {
	if m != nil {
		return m.ColorRgb
	}
	return nil
}

func (m *DeviceState) GetSpeed() *DeviceState_SpeedState {
	if m != nil {
		return m.Speed
	}
	return nil
}

func (m *DeviceState) GetInput() *DeviceState_InputState {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *DeviceState) GetControl() *DeviceState_ControlState {
	if m != nil {
		return m.Control
	}
	return nil
}

func (m *DeviceState) GetTemperature() *DeviceState_TemperatureState {
	if m != nil {
		return m.Temperature
	}
	return nil
}

func (m *DeviceState) GetButton() []*DeviceState_ButtonState {
	if m != nil {
		return m.Button
	}
	return nil
}

func (m *DeviceState) GetPresence() *DeviceState_PresenceState {
	if m != nil {
		return m.Presence
	}
	return nil
}

func (m *DeviceState) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type DeviceState_BinaryState struct {
	IsOn bool `protobuf:"varint,1,opt,name=is_on,json=isOn" json:"is_on,omitempty"`
}

func (m *DeviceState_BinaryState) Reset()                    { *m = DeviceState_BinaryState{} }
func (m *DeviceState_BinaryState) String() string            { return proto.CompactTextString(m) }
func (*DeviceState_BinaryState) ProtoMessage()               {}
func (*DeviceState_BinaryState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0} }

func (m *DeviceState_BinaryState) GetIsOn() bool {
	if m != nil {
		return m.IsOn
	}
	return false
}

type DeviceState_RangeState struct {
	Value int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *DeviceState_RangeState) Reset()                    { *m = DeviceState_RangeState{} }
func (m *DeviceState_RangeState) String() string            { return proto.CompactTextString(m) }
func (*DeviceState_RangeState) ProtoMessage()               {}
func (*DeviceState_RangeState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 1} }

func (m *DeviceState_RangeState) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type DeviceState_RGBState struct {
	Red   int32 `protobuf:"varint,1,opt,name=red" json:"red,omitempty"`
	Green int32 `protobuf:"varint,2,opt,name=green" json:"green,omitempty"`
	Blue  int32 `protobuf:"varint,3,opt,name=blue" json:"blue,omitempty"`
}

func (m *DeviceState_RGBState) Reset()                    { *m = DeviceState_RGBState{} }
func (m *DeviceState_RGBState) String() string            { return proto.CompactTextString(m) }
func (*DeviceState_RGBState) ProtoMessage()               {}
func (*DeviceState_RGBState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 2} }

func (m *DeviceState_RGBState) GetRed() int32 {
	if m != nil {
		return m.Red
	}
	return 0
}

func (m *DeviceState_RGBState) GetGreen() int32 {
	if m != nil {
		return m.Green
	}
	return 0
}

func (m *DeviceState_RGBState) GetBlue() int32 {
	if m != nil {
		return m.Blue
	}
	return 0
}

type DeviceState_SpeedState struct {
	Speed int32 `protobuf:"varint,1,opt,name=speed" json:"speed,omitempty"`
}

func (m *DeviceState_SpeedState) Reset()                    { *m = DeviceState_SpeedState{} }
func (m *DeviceState_SpeedState) String() string            { return proto.CompactTextString(m) }
func (*DeviceState_SpeedState) ProtoMessage()               {}
func (*DeviceState_SpeedState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 3} }

func (m *DeviceState_SpeedState) GetSpeed() int32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

type DeviceState_InputState struct {
	Input string `protobuf:"bytes,1,opt,name=input" json:"input,omitempty"`
}

func (m *DeviceState_InputState) Reset()                    { *m = DeviceState_InputState{} }
func (m *DeviceState_InputState) String() string            { return proto.CompactTextString(m) }
func (*DeviceState_InputState) ProtoMessage()               {}
func (*DeviceState_InputState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 4} }

func (m *DeviceState_InputState) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

type DeviceState_ControlState struct {
	IsOpen bool `protobuf:"varint,1,opt,name=is_open,json=isOpen" json:"is_open,omitempty"`
}

func (m *DeviceState_ControlState) Reset()                    { *m = DeviceState_ControlState{} }
func (m *DeviceState_ControlState) String() string            { return proto.CompactTextString(m) }
func (*DeviceState_ControlState) ProtoMessage()               {}
func (*DeviceState_ControlState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 5} }

func (m *DeviceState_ControlState) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

type DeviceState_TemperatureState struct {
	TemperatureCelsius int32 `protobuf:"varint,1,opt,name=temperature_celsius,json=temperatureCelsius" json:"temperature_celsius,omitempty"`
}

func (m *DeviceState_TemperatureState) Reset()                    { *m = DeviceState_TemperatureState{} }
func (m *DeviceState_TemperatureState) String() string            { return proto.CompactTextString(m) }
func (*DeviceState_TemperatureState) ProtoMessage()               {}
func (*DeviceState_TemperatureState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 6} }

func (m *DeviceState_TemperatureState) GetTemperatureCelsius() int32 {
	if m != nil {
		return m.TemperatureCelsius
	}
	return 0
}

type DeviceState_ButtonState struct {
	Id   int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	IsOn bool  `protobuf:"varint,2,opt,name=is_on,json=isOn" json:"is_on,omitempty"`
}

func (m *DeviceState_ButtonState) Reset()                    { *m = DeviceState_ButtonState{} }
func (m *DeviceState_ButtonState) String() string            { return proto.CompactTextString(m) }
func (*DeviceState_ButtonState) ProtoMessage()               {}
func (*DeviceState_ButtonState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 7} }

func (m *DeviceState_ButtonState) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeviceState_ButtonState) GetIsOn() bool {
	if m != nil {
		return m.IsOn
	}
	return false
}

type DeviceState_PresenceState struct {
	IsPresent bool `protobuf:"varint,1,opt,name=is_present,json=isPresent" json:"is_present,omitempty"`
}

func (m *DeviceState_PresenceState) Reset()                    { *m = DeviceState_PresenceState{} }
func (m *DeviceState_PresenceState) String() string            { return proto.CompactTextString(m) }
func (*DeviceState_PresenceState) ProtoMessage()               {}
func (*DeviceState_PresenceState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 8} }

func (m *DeviceState_PresenceState) GetIsPresent() bool {
	if m != nil {
		return m.IsPresent
	}
	return false
}

type Device struct {
	Id               string              `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	IsActive         bool                `protobuf:"varint,2,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	ModelId          string              `protobuf:"bytes,10,opt,name=model_id,json=modelId" json:"model_id,omitempty"`
	ModelName        string              `protobuf:"bytes,11,opt,name=model_name,json=modelName" json:"model_name,omitempty"`
	ModelDescription string              `protobuf:"bytes,12,opt,name=model_description,json=modelDescription" json:"model_description,omitempty"`
	Manufacturer     string              `protobuf:"bytes,13,opt,name=manufacturer" json:"manufacturer,omitempty"`
	Address          string              `protobuf:"bytes,50,opt,name=address" json:"address,omitempty"`
	Range            *Device_RangeDevice `protobuf:"bytes,100,opt,name=range" json:"range,omitempty"`
	Input            *Device_InputDevice `protobuf:"bytes,101,opt,name=input" json:"input,omitempty"`
	Speed            *Device_SpeedDevice `protobuf:"bytes,102,opt,name=speed" json:"speed,omitempty"`
	Config           *DeviceConfig       `protobuf:"bytes,200,opt,name=config" json:"config,omitempty"`
	State            *DeviceState        `protobuf:"bytes,201,opt,name=state" json:"state,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Device) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Device) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Device) GetModelId() string {
	if m != nil {
		return m.ModelId
	}
	return ""
}

func (m *Device) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *Device) GetModelDescription() string {
	if m != nil {
		return m.ModelDescription
	}
	return ""
}

func (m *Device) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *Device) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Device) GetRange() *Device_RangeDevice {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *Device) GetInput() *Device_InputDevice {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Device) GetSpeed() *Device_SpeedDevice {
	if m != nil {
		return m.Speed
	}
	return nil
}

func (m *Device) GetConfig() *DeviceConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Device) GetState() *DeviceState {
	if m != nil {
		return m.State
	}
	return nil
}

// Examples could include a thermostat.
type Device_RangeDevice struct {
	Minimum int32 `protobuf:"varint,1,opt,name=minimum" json:"minimum,omitempty"`
	Maximum int32 `protobuf:"varint,2,opt,name=maximum" json:"maximum,omitempty"`
}

func (m *Device_RangeDevice) Reset()                    { *m = Device_RangeDevice{} }
func (m *Device_RangeDevice) String() string            { return proto.CompactTextString(m) }
func (*Device_RangeDevice) ProtoMessage()               {}
func (*Device_RangeDevice) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 0} }

func (m *Device_RangeDevice) GetMinimum() int32 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *Device_RangeDevice) GetMaximum() int32 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

// Examples could include a TV (list of inputs), speakers (list of inputs), etc.
type Device_InputDevice struct {
	Inputs []string `protobuf:"bytes,1,rep,name=inputs" json:"inputs,omitempty"`
}

func (m *Device_InputDevice) Reset()                    { *m = Device_InputDevice{} }
func (m *Device_InputDevice) String() string            { return proto.CompactTextString(m) }
func (*Device_InputDevice) ProtoMessage()               {}
func (*Device_InputDevice) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 1} }

func (m *Device_InputDevice) GetInputs() []string {
	if m != nil {
		return m.Inputs
	}
	return nil
}

// Examples could include a fan,
type Device_SpeedDevice struct {
	Maximum int32 `protobuf:"varint,1,opt,name=maximum" json:"maximum,omitempty"`
}

func (m *Device_SpeedDevice) Reset()                    { *m = Device_SpeedDevice{} }
func (m *Device_SpeedDevice) String() string            { return proto.CompactTextString(m) }
func (*Device_SpeedDevice) ProtoMessage()               {}
func (*Device_SpeedDevice) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 2} }

func (m *Device_SpeedDevice) GetMaximum() int32 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

type GetDevicesRequest struct {
}

func (m *GetDevicesRequest) Reset()                    { *m = GetDevicesRequest{} }
func (m *GetDevicesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDevicesRequest) ProtoMessage()               {}
func (*GetDevicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type GetDevicesResponse struct {
	Devices []*Device `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty"`
}

func (m *GetDevicesResponse) Reset()                    { *m = GetDevicesResponse{} }
func (m *GetDevicesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDevicesResponse) ProtoMessage()               {}
func (*GetDevicesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GetDevicesResponse) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

type GetDeviceRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetDeviceRequest) Reset()                    { *m = GetDeviceRequest{} }
func (m *GetDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceRequest) ProtoMessage()               {}
func (*GetDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *GetDeviceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetDeviceResponse struct {
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *GetDeviceResponse) Reset()                    { *m = GetDeviceResponse{} }
func (m *GetDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceResponse) ProtoMessage()               {}
func (*GetDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *GetDeviceResponse) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type WatchDevicesRequest struct {
}

func (m *WatchDevicesRequest) Reset()                    { *m = WatchDevicesRequest{} }
func (m *WatchDevicesRequest) String() string            { return proto.CompactTextString(m) }
func (*WatchDevicesRequest) ProtoMessage()               {}
func (*WatchDevicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

type DeviceUpdate struct {
	Action DeviceUpdate_Action `protobuf:"varint,1,opt,name=action,enum=pb.DeviceUpdate_Action" json:"action,omitempty"`
	Device *Device             `protobuf:"bytes,2,opt,name=device" json:"device,omitempty"`
}

func (m *DeviceUpdate) Reset()                    { *m = DeviceUpdate{} }
func (m *DeviceUpdate) String() string            { return proto.CompactTextString(m) }
func (*DeviceUpdate) ProtoMessage()               {}
func (*DeviceUpdate) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *DeviceUpdate) GetAction() DeviceUpdate_Action {
	if m != nil {
		return m.Action
	}
	return DeviceUpdate_ADDED
}

func (m *DeviceUpdate) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type SetDeviceConfigRequest struct {
	Id      string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Version string        `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Config  *DeviceConfig `protobuf:"bytes,10,opt,name=config" json:"config,omitempty"`
}

func (m *SetDeviceConfigRequest) Reset()                    { *m = SetDeviceConfigRequest{} }
func (m *SetDeviceConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*SetDeviceConfigRequest) ProtoMessage()               {}
func (*SetDeviceConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *SetDeviceConfigRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SetDeviceConfigRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *SetDeviceConfigRequest) GetConfig() *DeviceConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type SetDeviceConfigResponse struct {
	Error  string  `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Device *Device `protobuf:"bytes,10,opt,name=device" json:"device,omitempty"`
}

func (m *SetDeviceConfigResponse) Reset()                    { *m = SetDeviceConfigResponse{} }
func (m *SetDeviceConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*SetDeviceConfigResponse) ProtoMessage()               {}
func (*SetDeviceConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *SetDeviceConfigResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *SetDeviceConfigResponse) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type SetDeviceStateRequest struct {
	Id      string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Version string       `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	State   *DeviceState `protobuf:"bytes,10,opt,name=state" json:"state,omitempty"`
}

func (m *SetDeviceStateRequest) Reset()                    { *m = SetDeviceStateRequest{} }
func (m *SetDeviceStateRequest) String() string            { return proto.CompactTextString(m) }
func (*SetDeviceStateRequest) ProtoMessage()               {}
func (*SetDeviceStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *SetDeviceStateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SetDeviceStateRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *SetDeviceStateRequest) GetState() *DeviceState {
	if m != nil {
		return m.State
	}
	return nil
}

type SetDeviceStateResponse struct {
	Error  string  `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Device *Device `protobuf:"bytes,10,opt,name=device" json:"device,omitempty"`
}

func (m *SetDeviceStateResponse) Reset()                    { *m = SetDeviceStateResponse{} }
func (m *SetDeviceStateResponse) String() string            { return proto.CompactTextString(m) }
func (*SetDeviceStateResponse) ProtoMessage()               {}
func (*SetDeviceStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *SetDeviceStateResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *SetDeviceStateResponse) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func init() {
	proto.RegisterType((*DeviceConfig)(nil), "pb.DeviceConfig")
	proto.RegisterType((*DeviceState)(nil), "pb.DeviceState")
	proto.RegisterType((*DeviceState_BinaryState)(nil), "pb.DeviceState.BinaryState")
	proto.RegisterType((*DeviceState_RangeState)(nil), "pb.DeviceState.RangeState")
	proto.RegisterType((*DeviceState_RGBState)(nil), "pb.DeviceState.RGBState")
	proto.RegisterType((*DeviceState_SpeedState)(nil), "pb.DeviceState.SpeedState")
	proto.RegisterType((*DeviceState_InputState)(nil), "pb.DeviceState.InputState")
	proto.RegisterType((*DeviceState_ControlState)(nil), "pb.DeviceState.ControlState")
	proto.RegisterType((*DeviceState_TemperatureState)(nil), "pb.DeviceState.TemperatureState")
	proto.RegisterType((*DeviceState_ButtonState)(nil), "pb.DeviceState.ButtonState")
	proto.RegisterType((*DeviceState_PresenceState)(nil), "pb.DeviceState.PresenceState")
	proto.RegisterType((*Device)(nil), "pb.Device")
	proto.RegisterType((*Device_RangeDevice)(nil), "pb.Device.RangeDevice")
	proto.RegisterType((*Device_InputDevice)(nil), "pb.Device.InputDevice")
	proto.RegisterType((*Device_SpeedDevice)(nil), "pb.Device.SpeedDevice")
	proto.RegisterType((*GetDevicesRequest)(nil), "pb.GetDevicesRequest")
	proto.RegisterType((*GetDevicesResponse)(nil), "pb.GetDevicesResponse")
	proto.RegisterType((*GetDeviceRequest)(nil), "pb.GetDeviceRequest")
	proto.RegisterType((*GetDeviceResponse)(nil), "pb.GetDeviceResponse")
	proto.RegisterType((*WatchDevicesRequest)(nil), "pb.WatchDevicesRequest")
	proto.RegisterType((*DeviceUpdate)(nil), "pb.DeviceUpdate")
	proto.RegisterType((*SetDeviceConfigRequest)(nil), "pb.SetDeviceConfigRequest")
	proto.RegisterType((*SetDeviceConfigResponse)(nil), "pb.SetDeviceConfigResponse")
	proto.RegisterType((*SetDeviceStateRequest)(nil), "pb.SetDeviceStateRequest")
	proto.RegisterType((*SetDeviceStateResponse)(nil), "pb.SetDeviceStateResponse")
	proto.RegisterEnum("pb.DeviceUpdate_Action", DeviceUpdate_Action_name, DeviceUpdate_Action_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeviceManager service

type DeviceManagerClient interface {
	GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (*GetDevicesResponse, error)
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error)
	WatchDevices(ctx context.Context, in *WatchDevicesRequest, opts ...grpc.CallOption) (DeviceManager_WatchDevicesClient, error)
	SetDeviceConfig(ctx context.Context, in *SetDeviceConfigRequest, opts ...grpc.CallOption) (*SetDeviceConfigResponse, error)
	SetDeviceState(ctx context.Context, in *SetDeviceStateRequest, opts ...grpc.CallOption) (*SetDeviceStateResponse, error)
}

type deviceManagerClient struct {
	cc *grpc.ClientConn
}

func NewDeviceManagerClient(cc *grpc.ClientConn) DeviceManagerClient {
	return &deviceManagerClient{cc}
}

func (c *deviceManagerClient) GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (*GetDevicesResponse, error) {
	out := new(GetDevicesResponse)
	err := grpc.Invoke(ctx, "/pb.DeviceManager/GetDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error) {
	out := new(GetDeviceResponse)
	err := grpc.Invoke(ctx, "/pb.DeviceManager/GetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerClient) WatchDevices(ctx context.Context, in *WatchDevicesRequest, opts ...grpc.CallOption) (DeviceManager_WatchDevicesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DeviceManager_serviceDesc.Streams[0], c.cc, "/pb.DeviceManager/WatchDevices", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceManagerWatchDevicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceManager_WatchDevicesClient interface {
	Recv() (*DeviceUpdate, error)
	grpc.ClientStream
}

type deviceManagerWatchDevicesClient struct {
	grpc.ClientStream
}

func (x *deviceManagerWatchDevicesClient) Recv() (*DeviceUpdate, error) {
	m := new(DeviceUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceManagerClient) SetDeviceConfig(ctx context.Context, in *SetDeviceConfigRequest, opts ...grpc.CallOption) (*SetDeviceConfigResponse, error) {
	out := new(SetDeviceConfigResponse)
	err := grpc.Invoke(ctx, "/pb.DeviceManager/SetDeviceConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerClient) SetDeviceState(ctx context.Context, in *SetDeviceStateRequest, opts ...grpc.CallOption) (*SetDeviceStateResponse, error) {
	out := new(SetDeviceStateResponse)
	err := grpc.Invoke(ctx, "/pb.DeviceManager/SetDeviceState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeviceManager service

type DeviceManagerServer interface {
	GetDevices(context.Context, *GetDevicesRequest) (*GetDevicesResponse, error)
	GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error)
	WatchDevices(*WatchDevicesRequest, DeviceManager_WatchDevicesServer) error
	SetDeviceConfig(context.Context, *SetDeviceConfigRequest) (*SetDeviceConfigResponse, error)
	SetDeviceState(context.Context, *SetDeviceStateRequest) (*SetDeviceStateResponse, error)
}

func RegisterDeviceManagerServer(s *grpc.Server, srv DeviceManagerServer) {
	s.RegisterService(&_DeviceManager_serviceDesc, srv)
}

func _DeviceManager_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DeviceManager/GetDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).GetDevices(ctx, req.(*GetDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManager_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DeviceManager/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManager_WatchDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchDevicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceManagerServer).WatchDevices(m, &deviceManagerWatchDevicesServer{stream})
}

type DeviceManager_WatchDevicesServer interface {
	Send(*DeviceUpdate) error
	grpc.ServerStream
}

type deviceManagerWatchDevicesServer struct {
	grpc.ServerStream
}

func (x *deviceManagerWatchDevicesServer) Send(m *DeviceUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceManager_SetDeviceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).SetDeviceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DeviceManager/SetDeviceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).SetDeviceConfig(ctx, req.(*SetDeviceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManager_SetDeviceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).SetDeviceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DeviceManager/SetDeviceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).SetDeviceState(ctx, req.(*SetDeviceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DeviceManager",
	HandlerType: (*DeviceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevices",
			Handler:    _DeviceManager_GetDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _DeviceManager_GetDevice_Handler,
		},
		{
			MethodName: "SetDeviceConfig",
			Handler:    _DeviceManager_SetDeviceConfig_Handler,
		},
		{
			MethodName: "SetDeviceState",
			Handler:    _DeviceManager_SetDeviceState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchDevices",
			Handler:       _DeviceManager_WatchDevices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "device.proto",
}

func init() { proto.RegisterFile("device.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1059 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x6d, 0x6f, 0xe3, 0x44,
	0x10, 0x6e, 0xd2, 0xe6, 0x6d, 0x9c, 0xb6, 0xe9, 0xf6, 0xcd, 0xe7, 0x72, 0x52, 0xb1, 0x38, 0xae,
	0x88, 0x12, 0x4e, 0x39, 0x01, 0xe2, 0xa4, 0xfb, 0xd0, 0x36, 0xa5, 0x54, 0xe2, 0xae, 0xc8, 0xe5,
	0xe5, 0x63, 0xe4, 0xd8, 0xdb, 0x74, 0xa5, 0xc4, 0x36, 0x5e, 0xa7, 0x82, 0xbf, 0xc1, 0xaf, 0x02,
	0x7e, 0xc6, 0xfd, 0x12, 0xb4, 0x33, 0xbb, 0xf1, 0xc6, 0xcd, 0x9d, 0x84, 0xf8, 0xe6, 0x99, 0x79,
	0x9e, 0x99, 0xdd, 0x99, 0x67, 0x27, 0x81, 0x6e, 0xcc, 0x1f, 0x44, 0xc4, 0xfb, 0x59, 0x9e, 0x16,
	0x29, 0xab, 0x67, 0x63, 0x7f, 0x08, 0xdd, 0x21, 0xfa, 0x2e, 0xd2, 0xe4, 0x4e, 0x4c, 0x18, 0x83,
	0x8d, 0x24, 0x9c, 0x71, 0xb7, 0x76, 0x5c, 0x3b, 0xe9, 0x04, 0xf8, 0xcd, 0x8e, 0xc1, 0x89, 0xb9,
	0x8c, 0x72, 0x91, 0x15, 0x22, 0x4d, 0xdc, 0x3a, 0x86, 0x6c, 0x97, 0xff, 0xae, 0x05, 0x0e, 0xa5,
	0xb9, 0x2d, 0xc2, 0x82, 0xb3, 0x8f, 0xa1, 0x2b, 0xe4, 0x28, 0xe7, 0x61, 0x74, 0x1f, 0x8e, 0xa7,
	0x94, 0xad, 0x1d, 0x38, 0x42, 0x06, 0xc6, 0xc5, 0x5e, 0x42, 0x73, 0x2c, 0x92, 0x30, 0xff, 0xc3,
	0x75, 0x8e, 0x6b, 0x27, 0xce, 0xe0, 0xa8, 0x9f, 0x8d, 0xfb, 0x56, 0x8e, 0xfe, 0x39, 0x46, 0xf1,
	0x3b, 0xd0, 0x50, 0xf6, 0x02, 0x1a, 0x79, 0x98, 0x4c, 0xb8, 0xdb, 0x45, 0x8e, 0x57, 0xe5, 0x04,
	0x2a, 0x48, 0x14, 0x02, 0xb2, 0xaf, 0xa0, 0x13, 0xa5, 0xd3, 0x34, 0x1f, 0xe5, 0x93, 0xb1, 0xbb,
	0x89, 0x2c, 0xf7, 0x11, 0xeb, 0xea, 0x9c, 0x38, 0x6d, 0x84, 0x06, 0x93, 0xb1, 0x2a, 0x24, 0x33,
	0xce, 0x63, 0x77, 0x6b, 0x75, 0xa1, 0x5b, 0x15, 0xd4, 0x85, 0x10, 0xa8, 0x18, 0x22, 0xc9, 0xe6,
	0x85, 0xbb, 0xbd, 0x9a, 0x71, 0xad, 0x82, 0x9a, 0x81, 0x40, 0xf6, 0x35, 0xb4, 0xa2, 0x34, 0x29,
	0xf2, 0x74, 0xea, 0xf6, 0x90, 0xf3, 0x51, 0x95, 0x73, 0x41, 0x61, 0x62, 0x19, 0x30, 0x3b, 0x07,
	0xa7, 0xe0, 0xb3, 0x8c, 0xe7, 0x61, 0x31, 0xcf, 0xb9, 0xbb, 0x83, 0xdc, 0xe3, 0x2a, 0xf7, 0xa7,
	0x12, 0x42, 0x7c, 0x9b, 0x84, 0xdd, 0x9f, 0x17, 0x45, 0x9a, 0xb8, 0xec, 0x78, 0x7d, 0x65, 0xf7,
	0x31, 0x6a, 0xba, 0x8f, 0x06, 0xfb, 0x16, 0xda, 0x59, 0xce, 0x25, 0x4f, 0x22, 0xee, 0xee, 0x62,
	0xd5, 0xa7, 0x55, 0xda, 0x8f, 0x3a, 0xae, 0xfb, 0x69, 0xe0, 0xcc, 0x85, 0xd6, 0x03, 0xcf, 0xa5,
	0x92, 0x4f, 0x8c, 0xf2, 0x31, 0xa6, 0xe7, 0x83, 0x63, 0x4d, 0x9a, 0xed, 0x42, 0x43, 0xc8, 0x51,
	0x9a, 0x68, 0xc9, 0x6c, 0x08, 0x79, 0xa3, 0x30, 0x50, 0x4e, 0x96, 0xed, 0x41, 0xe3, 0x21, 0x9c,
	0xce, 0x49, 0x55, 0x8d, 0x80, 0x0c, 0xef, 0x3b, 0x68, 0x9b, 0x39, 0xb2, 0x1e, 0xac, 0xe7, 0x3c,
	0xd6, 0x71, 0xf5, 0xa9, 0x38, 0x93, 0x9c, 0x73, 0x12, 0x6f, 0x23, 0x20, 0x43, 0x89, 0x7d, 0xac,
	0x12, 0xad, 0xa3, 0x13, 0xbf, 0x55, 0xad, 0x72, 0xb8, 0x8a, 0x47, 0x3a, 0xd0, 0xb5, 0xd0, 0x50,
	0x98, 0x72, 0x9c, 0x0a, 0x43, 0x93, 0xa7, 0x37, 0x43, 0x86, 0xf7, 0x1c, 0xba, 0xf6, 0xf8, 0xd8,
	0x21, 0xb4, 0xd4, 0xc5, 0x32, 0x6e, 0xae, 0xd6, 0x14, 0xf2, 0x26, 0xe3, 0x89, 0x77, 0x01, 0xbd,
	0xea, 0xac, 0xd8, 0x97, 0xb0, 0x6b, 0x4d, 0x6b, 0x14, 0xf1, 0xa9, 0x14, 0x73, 0xa9, 0x0f, 0xc1,
	0xac, 0xd0, 0x05, 0x45, 0xbc, 0x01, 0x38, 0xd6, 0xc4, 0xd8, 0x16, 0xd4, 0x85, 0x39, 0x73, 0x5d,
	0xc4, 0x65, 0x57, 0xeb, 0x56, 0x57, 0xfb, 0xb0, 0xb9, 0x34, 0x2e, 0xf6, 0x14, 0x40, 0xc8, 0x11,
	0xcd, 0xac, 0xd0, 0xa7, 0xec, 0x08, 0x49, 0xa0, 0xc2, 0xff, 0x67, 0x03, 0x9a, 0x34, 0x6b, 0x2b,
	0x7f, 0x07, 0xf3, 0x1f, 0x41, 0x47, 0xc8, 0x51, 0x18, 0x15, 0xe2, 0x81, 0xeb, 0x1a, 0x6d, 0x21,
	0xcf, 0xd0, 0x66, 0x4f, 0xa0, 0x3d, 0x4b, 0x63, 0x3e, 0x1d, 0x89, 0xd8, 0x05, 0x1a, 0x3e, 0xda,
	0xd7, 0xb1, 0xaa, 0x48, 0x21, 0xdc, 0x39, 0x0e, 0x06, 0x3b, 0xe8, 0x79, 0xab, 0x16, 0xcf, 0xe7,
	0xb0, 0x43, 0x61, 0x7b, 0xfd, 0x74, 0x11, 0xd5, 0xc3, 0xc0, 0xb0, 0xf4, 0x33, 0x1f, 0xba, 0xb3,
	0x30, 0x99, 0xdf, 0x85, 0x91, 0x6a, 0x4c, 0x8e, 0x8f, 0xbd, 0x13, 0x2c, 0xf9, 0x94, 0x0c, 0xc3,
	0x38, 0xce, 0xb9, 0x94, 0xee, 0x80, 0x4e, 0xa2, 0x4d, 0x76, 0x6a, 0x36, 0x4b, 0x8c, 0xc2, 0x3e,
	0x28, 0x85, 0x4d, 0x4b, 0x85, 0xbe, 0xcd, 0x56, 0x39, 0x35, 0x23, 0xe7, 0x8f, 0xd0, 0x28, 0x0c,
	0x83, 0xa6, 0x87, 0x7e, 0x6a, 0x44, 0x74, 0xf7, 0x08, 0x8d, 0x52, 0x33, 0x68, 0x5a, 0x24, 0x9f,
	0x41, 0x33, 0xc2, 0x5d, 0xec, 0xfe, 0x55, 0x43, 0x7c, 0xaf, 0xc4, 0xd3, 0x92, 0x0e, 0x34, 0x80,
	0x7d, 0x0a, 0x0d, 0xa9, 0x26, 0xe7, 0xfe, 0x4d, 0xc8, 0xed, 0xca, 0x73, 0x0c, 0x28, 0xec, 0x9d,
	0x81, 0x63, 0x5d, 0x42, 0x75, 0x61, 0x26, 0x12, 0x31, 0x9b, 0xcf, 0xb4, 0x44, 0x8c, 0x89, 0x91,
	0xf0, 0x77, 0x8c, 0xd4, 0x75, 0x84, 0x4c, 0xef, 0x19, 0x38, 0xd6, 0xcd, 0xd8, 0x01, 0x34, 0xf1,
	0x6e, 0x4a, 0x93, 0xeb, 0x27, 0x9d, 0x40, 0x5b, 0xde, 0x73, 0x70, 0xac, 0x2b, 0xd9, 0xf9, 0x6a,
	0x4b, 0xf9, 0xfc, 0x5d, 0xd8, 0xb9, 0xe2, 0x3a, 0x9b, 0x0c, 0xf8, 0x6f, 0x73, 0x2e, 0x0b, 0xff,
	0x15, 0x30, 0xdb, 0x29, 0xb3, 0x34, 0x91, 0x9c, 0x7d, 0x02, 0x2d, 0xfa, 0xd9, 0xa2, 0x62, 0xce,
	0x00, 0xca, 0x6b, 0x06, 0x26, 0xe4, 0xfb, 0xd0, 0x5b, 0x70, 0x75, 0xbe, 0xaa, 0x4c, 0xfd, 0x6f,
	0xac, 0xa2, 0x8b, 0xf4, 0x3e, 0x34, 0x29, 0x87, 0x4b, 0x4d, 0xb4, 0xb3, 0xeb, 0x88, 0xbf, 0x0f,
	0xbb, 0xbf, 0x86, 0x45, 0x74, 0x5f, 0x39, 0xef, 0x9f, 0x35, 0xf3, 0xeb, 0xf9, 0x73, 0x16, 0xd3,
	0xbb, 0x6d, 0xaa, 0x47, 0xa0, 0xd7, 0xd7, 0xd6, 0xe0, 0xb0, 0xcc, 0x45, 0x88, 0xfe, 0x19, 0x86,
	0x03, 0x0d, 0xb3, 0x8a, 0xd7, 0xdf, 0x5b, 0xfc, 0x0b, 0x68, 0x12, 0x8b, 0x75, 0xa0, 0x71, 0x36,
	0x1c, 0x5e, 0x0e, 0x7b, 0x6b, 0xcc, 0x81, 0xd6, 0xc5, 0xf7, 0x67, 0x6f, 0xaf, 0x2e, 0x87, 0xbd,
	0x9a, 0x32, 0x82, 0xcb, 0x37, 0x37, 0xbf, 0x5c, 0x0e, 0x7b, 0x75, 0x7f, 0x0a, 0x07, 0xb7, 0xe6,
	0x92, 0x5a, 0x2f, 0xab, 0xdb, 0x61, 0x2f, 0xe5, 0xfa, 0xd2, 0x52, 0x66, 0x27, 0x0b, 0x0d, 0xc2,
	0x87, 0x25, 0xe8, 0xdf, 0xc2, 0xe1, 0xa3, 0x6a, 0xba, 0xb1, 0x7b, 0xd0, 0xe0, 0x79, 0x9e, 0xe6,
	0x66, 0x2f, 0xa2, 0x61, 0xdd, 0x18, 0xde, 0x7b, 0xe3, 0x7b, 0xd8, 0x5f, 0x24, 0x25, 0x21, 0xff,
	0xe7, 0x1b, 0x3c, 0x33, 0x4f, 0x03, 0x3e, 0xf4, 0x32, 0xfc, 0xc0, 0x6a, 0x96, 0xae, 0xf4, 0x7f,
	0x4f, 0x3f, 0x78, 0x57, 0x87, 0x4d, 0x72, 0xbd, 0x09, 0x93, 0x70, 0xc2, 0x73, 0xf6, 0x1a, 0xa0,
	0xd4, 0x35, 0xdb, 0x57, 0x9c, 0x47, 0xe2, 0xf7, 0x0e, 0xaa, 0x6e, 0x3a, 0x88, 0xbf, 0xc6, 0x5e,
	0x41, 0x67, 0xe1, 0x67, 0x7b, 0x4b, 0x30, 0x43, 0xde, 0xaf, 0x78, 0x17, 0xdc, 0xd7, 0xd0, 0xb5,
	0x95, 0xcb, 0x50, 0x91, 0x2b, 0xb4, 0xec, 0xf5, 0xaa, 0x52, 0xf5, 0xd7, 0x5e, 0xd4, 0xd8, 0x0f,
	0xb0, 0x5d, 0x19, 0x2f, 0xc3, 0x7f, 0x36, 0xab, 0x15, 0xe6, 0x1d, 0xad, 0x8c, 0x2d, 0x0e, 0x73,
	0x0d, 0x5b, 0xcb, 0xdd, 0x66, 0x4f, 0x96, 0x08, 0xf6, 0xac, 0x3d, 0x6f, 0x55, 0xc8, 0xa4, 0x1a,
	0x37, 0xf1, 0x2f, 0xec, 0xcb, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xbd, 0x0d, 0x06, 0xd2,
	0x0a, 0x00, 0x00,
}
