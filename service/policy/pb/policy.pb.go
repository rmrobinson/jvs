// Code generated by protoc-gen-go. DO NOT EDIT.
// source: policy.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	policy.proto

It has these top-level messages:
	DeviceCondition
	Condition
	Action
	Policy
	PolicySet
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Comparison int32

const (
	Comparison_Equal              Comparison = 0
	Comparison_GreaterThan        Comparison = 1
	Comparison_GreaterThanEqualTo Comparison = 2
	Comparison_LessThan           Comparison = 3
	Comparison_LessThanEqualTo    Comparison = 4
)

var Comparison_name = map[int32]string{
	0: "Equal",
	1: "GreaterThan",
	2: "GreaterThanEqualTo",
	3: "LessThan",
	4: "LessThanEqualTo",
}
var Comparison_value = map[string]int32{
	"Equal":              0,
	"GreaterThan":        1,
	"GreaterThanEqualTo": 2,
	"LessThan":           3,
	"LessThanEqualTo":    4,
}

func (x Comparison) String() string {
	return proto.EnumName(Comparison_name, int32(x))
}
func (Comparison) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Condition_Set_Operator int32

const (
	Condition_Set_And Condition_Set_Operator = 0
	Condition_Set_Or  Condition_Set_Operator = 1
)

var Condition_Set_Operator_name = map[int32]string{
	0: "And",
	1: "Or",
}
var Condition_Set_Operator_value = map[string]int32{
	"And": 0,
	"Or":  1,
}

func (x Condition_Set_Operator) String() string {
	return proto.EnumName(Condition_Set_Operator_name, int32(x))
}
func (Condition_Set_Operator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0, 0} }

type Action_Type int32

const (
	Action_Log Action_Type = 0
)

var Action_Type_name = map[int32]string{
	0: "Log",
}
var Action_Type_value = map[string]int32{
	"Log": 0,
}

func (x Action_Type) String() string {
	return proto.EnumName(Action_Type_name, int32(x))
}
func (Action_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type DeviceCondition struct {
	DeviceId    string                       `protobuf:"bytes,1,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Binary      *DeviceCondition_Binary      `protobuf:"bytes,50,opt,name=binary" json:"binary,omitempty"`
	Range       *DeviceCondition_Range       `protobuf:"bytes,51,opt,name=range" json:"range,omitempty"`
	Rgb         *DeviceCondition_RGB         `protobuf:"bytes,52,opt,name=rgb" json:"rgb,omitempty"`
	Speed       *DeviceCondition_Speed       `protobuf:"bytes,53,opt,name=speed" json:"speed,omitempty"`
	Input       *DeviceCondition_Input       `protobuf:"bytes,54,opt,name=input" json:"input,omitempty"`
	Control     *DeviceCondition_Control     `protobuf:"bytes,55,opt,name=control" json:"control,omitempty"`
	Temperature *DeviceCondition_Temperature `protobuf:"bytes,56,opt,name=temperature" json:"temperature,omitempty"`
	Button      *DeviceCondition_Button      `protobuf:"bytes,57,opt,name=button" json:"button,omitempty"`
	Presence    *DeviceCondition_Presence    `protobuf:"bytes,58,opt,name=presence" json:"presence,omitempty"`
}

func (m *DeviceCondition) Reset()                    { *m = DeviceCondition{} }
func (m *DeviceCondition) String() string            { return proto.CompactTextString(m) }
func (*DeviceCondition) ProtoMessage()               {}
func (*DeviceCondition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeviceCondition) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceCondition) GetBinary() *DeviceCondition_Binary {
	if m != nil {
		return m.Binary
	}
	return nil
}

func (m *DeviceCondition) GetRange() *DeviceCondition_Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *DeviceCondition) GetRgb() *DeviceCondition_RGB {
	if m != nil {
		return m.Rgb
	}
	return nil
}

func (m *DeviceCondition) GetSpeed() *DeviceCondition_Speed {
	if m != nil {
		return m.Speed
	}
	return nil
}

func (m *DeviceCondition) GetInput() *DeviceCondition_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *DeviceCondition) GetControl() *DeviceCondition_Control {
	if m != nil {
		return m.Control
	}
	return nil
}

func (m *DeviceCondition) GetTemperature() *DeviceCondition_Temperature {
	if m != nil {
		return m.Temperature
	}
	return nil
}

func (m *DeviceCondition) GetButton() *DeviceCondition_Button {
	if m != nil {
		return m.Button
	}
	return nil
}

func (m *DeviceCondition) GetPresence() *DeviceCondition_Presence {
	if m != nil {
		return m.Presence
	}
	return nil
}

type DeviceCondition_Binary struct {
	IsOn bool `protobuf:"varint,1,opt,name=is_on,json=isOn" json:"is_on,omitempty"`
}

func (m *DeviceCondition_Binary) Reset()                    { *m = DeviceCondition_Binary{} }
func (m *DeviceCondition_Binary) String() string            { return proto.CompactTextString(m) }
func (*DeviceCondition_Binary) ProtoMessage()               {}
func (*DeviceCondition_Binary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *DeviceCondition_Binary) GetIsOn() bool {
	if m != nil {
		return m.IsOn
	}
	return false
}

type DeviceCondition_Range struct {
	Value      int32      `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Comparison Comparison `protobuf:"varint,2,opt,name=comparison,enum=pb.Comparison" json:"comparison,omitempty"`
}

func (m *DeviceCondition_Range) Reset()                    { *m = DeviceCondition_Range{} }
func (m *DeviceCondition_Range) String() string            { return proto.CompactTextString(m) }
func (*DeviceCondition_Range) ProtoMessage()               {}
func (*DeviceCondition_Range) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *DeviceCondition_Range) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *DeviceCondition_Range) GetComparison() Comparison {
	if m != nil {
		return m.Comparison
	}
	return Comparison_Equal
}

type DeviceCondition_RGB struct {
	Red        int32      `protobuf:"varint,1,opt,name=red" json:"red,omitempty"`
	Green      int32      `protobuf:"varint,2,opt,name=green" json:"green,omitempty"`
	Blue       int32      `protobuf:"varint,3,opt,name=blue" json:"blue,omitempty"`
	RedCheck   Comparison `protobuf:"varint,11,opt,name=red_check,json=redCheck,enum=pb.Comparison" json:"red_check,omitempty"`
	GreenCheck Comparison `protobuf:"varint,12,opt,name=green_check,json=greenCheck,enum=pb.Comparison" json:"green_check,omitempty"`
	BlueCheck  Comparison `protobuf:"varint,113,opt,name=blue_check,json=blueCheck,enum=pb.Comparison" json:"blue_check,omitempty"`
}

func (m *DeviceCondition_RGB) Reset()                    { *m = DeviceCondition_RGB{} }
func (m *DeviceCondition_RGB) String() string            { return proto.CompactTextString(m) }
func (*DeviceCondition_RGB) ProtoMessage()               {}
func (*DeviceCondition_RGB) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

func (m *DeviceCondition_RGB) GetRed() int32 {
	if m != nil {
		return m.Red
	}
	return 0
}

func (m *DeviceCondition_RGB) GetGreen() int32 {
	if m != nil {
		return m.Green
	}
	return 0
}

func (m *DeviceCondition_RGB) GetBlue() int32 {
	if m != nil {
		return m.Blue
	}
	return 0
}

func (m *DeviceCondition_RGB) GetRedCheck() Comparison {
	if m != nil {
		return m.RedCheck
	}
	return Comparison_Equal
}

func (m *DeviceCondition_RGB) GetGreenCheck() Comparison {
	if m != nil {
		return m.GreenCheck
	}
	return Comparison_Equal
}

func (m *DeviceCondition_RGB) GetBlueCheck() Comparison {
	if m != nil {
		return m.BlueCheck
	}
	return Comparison_Equal
}

type DeviceCondition_Speed struct {
	Value      int32      `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Comparison Comparison `protobuf:"varint,2,opt,name=comparison,enum=pb.Comparison" json:"comparison,omitempty"`
}

func (m *DeviceCondition_Speed) Reset()                    { *m = DeviceCondition_Speed{} }
func (m *DeviceCondition_Speed) String() string            { return proto.CompactTextString(m) }
func (*DeviceCondition_Speed) ProtoMessage()               {}
func (*DeviceCondition_Speed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 3} }

func (m *DeviceCondition_Speed) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *DeviceCondition_Speed) GetComparison() Comparison {
	if m != nil {
		return m.Comparison
	}
	return Comparison_Equal
}

type DeviceCondition_Input struct {
	Input string `protobuf:"bytes,1,opt,name=input" json:"input,omitempty"`
}

func (m *DeviceCondition_Input) Reset()                    { *m = DeviceCondition_Input{} }
func (m *DeviceCondition_Input) String() string            { return proto.CompactTextString(m) }
func (*DeviceCondition_Input) ProtoMessage()               {}
func (*DeviceCondition_Input) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 4} }

func (m *DeviceCondition_Input) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

type DeviceCondition_Control struct {
	IsOpen bool `protobuf:"varint,1,opt,name=is_open,json=isOpen" json:"is_open,omitempty"`
}

func (m *DeviceCondition_Control) Reset()                    { *m = DeviceCondition_Control{} }
func (m *DeviceCondition_Control) String() string            { return proto.CompactTextString(m) }
func (*DeviceCondition_Control) ProtoMessage()               {}
func (*DeviceCondition_Control) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 5} }

func (m *DeviceCondition_Control) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

type DeviceCondition_Temperature struct {
	TemperatureCelsius int32 `protobuf:"varint,1,opt,name=temperature_celsius,json=temperatureCelsius" json:"temperature_celsius,omitempty"`
}

func (m *DeviceCondition_Temperature) Reset()                    { *m = DeviceCondition_Temperature{} }
func (m *DeviceCondition_Temperature) String() string            { return proto.CompactTextString(m) }
func (*DeviceCondition_Temperature) ProtoMessage()               {}
func (*DeviceCondition_Temperature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 6} }

func (m *DeviceCondition_Temperature) GetTemperatureCelsius() int32 {
	if m != nil {
		return m.TemperatureCelsius
	}
	return 0
}

type DeviceCondition_Button struct {
	Id   int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	IsOn bool  `protobuf:"varint,2,opt,name=is_on,json=isOn" json:"is_on,omitempty"`
}

func (m *DeviceCondition_Button) Reset()                    { *m = DeviceCondition_Button{} }
func (m *DeviceCondition_Button) String() string            { return proto.CompactTextString(m) }
func (*DeviceCondition_Button) ProtoMessage()               {}
func (*DeviceCondition_Button) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 7} }

func (m *DeviceCondition_Button) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeviceCondition_Button) GetIsOn() bool {
	if m != nil {
		return m.IsOn
	}
	return false
}

type DeviceCondition_Presence struct {
	IsPresent bool `protobuf:"varint,1,opt,name=is_present,json=isPresent" json:"is_present,omitempty"`
}

func (m *DeviceCondition_Presence) Reset()                    { *m = DeviceCondition_Presence{} }
func (m *DeviceCondition_Presence) String() string            { return proto.CompactTextString(m) }
func (*DeviceCondition_Presence) ProtoMessage()               {}
func (*DeviceCondition_Presence) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 8} }

func (m *DeviceCondition_Presence) GetIsPresent() bool {
	if m != nil {
		return m.IsPresent
	}
	return false
}

type Condition struct {
	Name   string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Negate bool             `protobuf:"varint,2,opt,name=negate" json:"negate,omitempty"`
	Set    *Condition_Set   `protobuf:"bytes,101,opt,name=set" json:"set,omitempty"`
	Cron   *Condition_Cron  `protobuf:"bytes,102,opt,name=cron" json:"cron,omitempty"`
	Timer  *Condition_Timer `protobuf:"bytes,103,opt,name=timer" json:"timer,omitempty"`
	// --- Additional conditionals ---
	Device *DeviceCondition `protobuf:"bytes,151,opt,name=device" json:"device,omitempty"`
}

func (m *Condition) Reset()                    { *m = Condition{} }
func (m *Condition) String() string            { return proto.CompactTextString(m) }
func (*Condition) ProtoMessage()               {}
func (*Condition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Condition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Condition) GetNegate() bool {
	if m != nil {
		return m.Negate
	}
	return false
}

func (m *Condition) GetSet() *Condition_Set {
	if m != nil {
		return m.Set
	}
	return nil
}

func (m *Condition) GetCron() *Condition_Cron {
	if m != nil {
		return m.Cron
	}
	return nil
}

func (m *Condition) GetTimer() *Condition_Timer {
	if m != nil {
		return m.Timer
	}
	return nil
}

func (m *Condition) GetDevice() *DeviceCondition {
	if m != nil {
		return m.Device
	}
	return nil
}

// A combination of conditions that will be evaluated together.
// This allows an arbitrarily complex statement to be generated.
type Condition_Set struct {
	Operator   Condition_Set_Operator `protobuf:"varint,1,opt,name=operator,enum=pb.Condition_Set_Operator" json:"operator,omitempty"`
	Conditions []*Condition           `protobuf:"bytes,2,rep,name=conditions" json:"conditions,omitempty"`
}

func (m *Condition_Set) Reset()                    { *m = Condition_Set{} }
func (m *Condition_Set) String() string            { return proto.CompactTextString(m) }
func (*Condition_Set) ProtoMessage()               {}
func (*Condition_Set) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Condition_Set) GetOperator() Condition_Set_Operator {
	if m != nil {
		return m.Operator
	}
	return Condition_Set_And
}

func (m *Condition_Set) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

// A scheduled condition that wil trigger on the supplied interval.
// This executes using the crontab syntax, in the specified timezone.
type Condition_Cron struct {
	Entry string `protobuf:"bytes,1,opt,name=entry" json:"entry,omitempty"`
	Tz    string `protobuf:"bytes,11,opt,name=tz" json:"tz,omitempty"`
}

func (m *Condition_Cron) Reset()                    { *m = Condition_Cron{} }
func (m *Condition_Cron) String() string            { return proto.CompactTextString(m) }
func (*Condition_Cron) ProtoMessage()               {}
func (*Condition_Cron) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

func (m *Condition_Cron) GetEntry() string {
	if m != nil {
		return m.Entry
	}
	return ""
}

func (m *Condition_Cron) GetTz() string {
	if m != nil {
		return m.Tz
	}
	return ""
}

// A conditional that will evaluate to true when the tied
// timer action has expired. This depends on the id specified
// in the condition matching the timer; it also allows multiple
// conditions to trigger on the same timer.
type Condition_Timer struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Condition_Timer) Reset()                    { *m = Condition_Timer{} }
func (m *Condition_Timer) String() string            { return proto.CompactTextString(m) }
func (*Condition_Timer) ProtoMessage()               {}
func (*Condition_Timer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 2} }

func (m *Condition_Timer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Action struct {
	Name string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type Action_Type `protobuf:"varint,2,opt,name=type,enum=pb.Action_Type" json:"type,omitempty"`
}

func (m *Action) Reset()                    { *m = Action{} }
func (m *Action) String() string            { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()               {}
func (*Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Action) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Action) GetType() Action_Type {
	if m != nil {
		return m.Type
	}
	return Action_Log
}

type Policy struct {
	Name      string     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Weight    int32      `protobuf:"varint,2,opt,name=weight" json:"weight,omitempty"`
	Condition *Condition `protobuf:"bytes,11,opt,name=condition" json:"condition,omitempty"`
	Actions   []*Action  `protobuf:"bytes,12,rep,name=actions" json:"actions,omitempty"`
}

func (m *Policy) Reset()                    { *m = Policy{} }
func (m *Policy) String() string            { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()               {}
func (*Policy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Policy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Policy) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Policy) GetCondition() *Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *Policy) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

type PolicySet struct {
	Policies []*Policy `protobuf:"bytes,1,rep,name=policies" json:"policies,omitempty"`
}

func (m *PolicySet) Reset()                    { *m = PolicySet{} }
func (m *PolicySet) String() string            { return proto.CompactTextString(m) }
func (*PolicySet) ProtoMessage()               {}
func (*PolicySet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PolicySet) GetPolicies() []*Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func init() {
	proto.RegisterType((*DeviceCondition)(nil), "pb.DeviceCondition")
	proto.RegisterType((*DeviceCondition_Binary)(nil), "pb.DeviceCondition.Binary")
	proto.RegisterType((*DeviceCondition_Range)(nil), "pb.DeviceCondition.Range")
	proto.RegisterType((*DeviceCondition_RGB)(nil), "pb.DeviceCondition.RGB")
	proto.RegisterType((*DeviceCondition_Speed)(nil), "pb.DeviceCondition.Speed")
	proto.RegisterType((*DeviceCondition_Input)(nil), "pb.DeviceCondition.Input")
	proto.RegisterType((*DeviceCondition_Control)(nil), "pb.DeviceCondition.Control")
	proto.RegisterType((*DeviceCondition_Temperature)(nil), "pb.DeviceCondition.Temperature")
	proto.RegisterType((*DeviceCondition_Button)(nil), "pb.DeviceCondition.Button")
	proto.RegisterType((*DeviceCondition_Presence)(nil), "pb.DeviceCondition.Presence")
	proto.RegisterType((*Condition)(nil), "pb.Condition")
	proto.RegisterType((*Condition_Set)(nil), "pb.Condition.Set")
	proto.RegisterType((*Condition_Cron)(nil), "pb.Condition.Cron")
	proto.RegisterType((*Condition_Timer)(nil), "pb.Condition.Timer")
	proto.RegisterType((*Action)(nil), "pb.Action")
	proto.RegisterType((*Policy)(nil), "pb.Policy")
	proto.RegisterType((*PolicySet)(nil), "pb.PolicySet")
	proto.RegisterEnum("pb.Comparison", Comparison_name, Comparison_value)
	proto.RegisterEnum("pb.Condition_Set_Operator", Condition_Set_Operator_name, Condition_Set_Operator_value)
	proto.RegisterEnum("pb.Action_Type", Action_Type_name, Action_Type_value)
}

func init() { proto.RegisterFile("policy.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 883 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xe1, 0x6e, 0xe3, 0x44,
	0x10, 0xc7, 0xeb, 0x38, 0x76, 0xec, 0x49, 0x69, 0xc2, 0x14, 0x5d, 0x8d, 0x4b, 0x45, 0x95, 0x43,
	0xa8, 0x85, 0xbb, 0x54, 0x4a, 0xb9, 0xe3, 0xe0, 0x03, 0x52, 0x1b, 0x50, 0x75, 0xd2, 0xa1, 0x9e,
	0xb6, 0xf9, 0x1e, 0x39, 0xf6, 0x92, 0xae, 0x48, 0xd7, 0xbe, 0xf5, 0xe6, 0x50, 0xee, 0x05, 0x10,
	0x4f, 0xc0, 0x6b, 0xf0, 0x24, 0xbc, 0x0c, 0x2f, 0x80, 0x76, 0xd6, 0x4e, 0xdc, 0x23, 0xe5, 0xd3,
	0x7d, 0xf3, 0x78, 0x7e, 0x33, 0x3b, 0x3b, 0xf3, 0x1f, 0x1b, 0x76, 0x8b, 0x7c, 0x21, 0xd2, 0xd5,
	0xb0, 0x50, 0xb9, 0xce, 0xb1, 0x55, 0xcc, 0x06, 0xff, 0x04, 0xd0, 0xfb, 0x91, 0xbf, 0x15, 0x29,
	0x1f, 0xe7, 0x32, 0x13, 0x5a, 0xe4, 0x12, 0x0f, 0x21, 0xcc, 0xe8, 0xd5, 0x54, 0x64, 0x91, 0x73,
	0xec, 0x9c, 0x84, 0x2c, 0xb0, 0x2f, 0x5e, 0x66, 0x38, 0x02, 0x7f, 0x26, 0x64, 0xa2, 0x56, 0xd1,
	0xe8, 0xd8, 0x39, 0xe9, 0x8e, 0xe2, 0x61, 0x31, 0x1b, 0xbe, 0x97, 0x61, 0x78, 0x49, 0x04, 0xab,
	0x48, 0x3c, 0x03, 0x4f, 0x25, 0x72, 0xce, 0xa3, 0x73, 0x0a, 0xf9, 0x74, 0x5b, 0x08, 0x33, 0x00,
	0xb3, 0x1c, 0x9e, 0x82, 0xab, 0xe6, 0xb3, 0xe8, 0x1b, 0xc2, 0x0f, 0xb6, 0xe2, 0x57, 0x97, 0xcc,
	0x30, 0x26, 0x77, 0x59, 0x70, 0x9e, 0x45, 0xcf, 0x1e, 0xce, 0x7d, 0x63, 0x00, 0x66, 0x39, 0x13,
	0x20, 0x64, 0xb1, 0xd4, 0xd1, 0xf3, 0x87, 0x03, 0x5e, 0x1a, 0x80, 0x59, 0x0e, 0x9f, 0x41, 0x27,
	0xcd, 0xa5, 0x56, 0xf9, 0x22, 0xfa, 0x96, 0x42, 0x0e, 0xb7, 0x85, 0x8c, 0x2d, 0xc2, 0x6a, 0x16,
	0x2f, 0xa0, 0xab, 0xf9, 0x5d, 0xc1, 0x55, 0xa2, 0x97, 0x8a, 0x47, 0x2f, 0x28, 0xf4, 0xf3, 0x6d,
	0xa1, 0x93, 0x0d, 0xc6, 0x9a, 0x31, 0xd4, 0xeb, 0xa5, 0xd6, 0xb9, 0x8c, 0xbe, 0xfb, 0x9f, 0x5e,
	0x13, 0xc1, 0x2a, 0x12, 0x5f, 0x40, 0x50, 0x28, 0x5e, 0x72, 0x99, 0xf2, 0xe8, 0x7b, 0x8a, 0xfa,
	0x6c, 0x5b, 0xd4, 0xeb, 0x8a, 0x61, 0x6b, 0x3a, 0x3e, 0x02, 0xdf, 0xce, 0x0d, 0xf7, 0xc1, 0x13,
	0xe5, 0x34, 0x97, 0x34, 0xfc, 0x80, 0xb5, 0x45, 0x79, 0x2d, 0xe3, 0x9f, 0xc1, 0xa3, 0x19, 0xe1,
	0x27, 0xe0, 0xbd, 0x4d, 0x16, 0x4b, 0x4e, 0x5e, 0x8f, 0x59, 0x03, 0x87, 0x00, 0x69, 0x7e, 0x57,
	0x24, 0x4a, 0x94, 0xb9, 0x8c, 0x5a, 0xc7, 0xce, 0xc9, 0xde, 0x68, 0xcf, 0x9c, 0x3c, 0x5e, 0xbf,
	0x65, 0x0d, 0x22, 0xfe, 0xdb, 0x01, 0x97, 0x5d, 0x5d, 0x62, 0x1f, 0x5c, 0xc5, 0xb3, 0x2a, 0x97,
	0x79, 0x34, 0xf9, 0xe7, 0x8a, 0x73, 0x9b, 0xc4, 0x63, 0xd6, 0x40, 0x84, 0xf6, 0xcc, 0x1c, 0xea,
	0xd2, 0x4b, 0x7a, 0xc6, 0xaf, 0x21, 0x54, 0x3c, 0x9b, 0xa6, 0xb7, 0x3c, 0xfd, 0x35, 0xea, 0x6e,
	0x3d, 0x32, 0x50, 0x3c, 0x1b, 0x1b, 0x3f, 0x9e, 0x41, 0x97, 0x32, 0x55, 0xf8, 0xee, 0xf6, 0x0a,
	0x09, 0xb1, 0x01, 0x4f, 0x01, 0xcc, 0x29, 0x15, 0xff, 0x66, 0x2b, 0x1f, 0x1a, 0x82, 0x70, 0xd3,
	0x1f, 0xd2, 0xd9, 0x07, 0xea, 0xcf, 0x11, 0x78, 0xa4, 0x42, 0x93, 0xce, 0xea, 0xd5, 0x6e, 0xa2,
	0x35, 0xe2, 0x01, 0x74, 0x2a, 0xc5, 0xe1, 0x01, 0x74, 0xcc, 0xb4, 0x0a, 0x5e, 0xcf, 0xcb, 0x17,
	0xe5, 0x75, 0xc1, 0x65, 0xfc, 0x03, 0x74, 0x1b, 0xd2, 0xc2, 0x33, 0xd8, 0x6f, 0x88, 0x6b, 0x9a,
	0xf2, 0x45, 0x29, 0x96, 0x65, 0x55, 0x25, 0x36, 0x5c, 0x63, 0xeb, 0x89, 0x9f, 0x82, 0x6f, 0xc5,
	0x85, 0x7b, 0xd0, 0x12, 0xf5, 0x8c, 0x5a, 0x22, 0xdb, 0x08, 0xa4, 0xd5, 0x10, 0xc8, 0x29, 0x04,
	0xb5, 0xaa, 0xf0, 0x08, 0x40, 0x94, 0x53, 0x2b, 0x2d, 0x5d, 0x95, 0x15, 0x8a, 0xd2, 0xfa, 0xf5,
	0xe0, 0x2f, 0x17, 0xc2, 0xcd, 0xf7, 0x06, 0xa1, 0x2d, 0x93, 0x3b, 0x5e, 0x5d, 0x90, 0x9e, 0xf1,
	0x11, 0xf8, 0x92, 0xcf, 0x13, 0xcd, 0xab, 0x23, 0x2a, 0x0b, 0x1f, 0x83, 0x5b, 0x72, 0x1d, 0x71,
	0x52, 0xf6, 0xc7, 0xb6, 0x7f, 0xeb, 0x35, 0xe7, 0x9a, 0x19, 0x2f, 0x7e, 0x09, 0xed, 0x54, 0xe5,
	0x32, 0xfa, 0x85, 0x28, 0xbc, 0x4f, 0x8d, 0x55, 0x2e, 0x19, 0xf9, 0xf1, 0x14, 0x3c, 0x2d, 0xee,
	0xb8, 0x8a, 0xe6, 0x04, 0xee, 0xdf, 0x07, 0x27, 0xc6, 0xc5, 0x2c, 0x81, 0x4f, 0xc0, 0xb7, 0x9f,
	0xc0, 0xe8, 0x4f, 0x67, 0x03, 0xbf, 0xb7, 0x55, 0xac, 0x62, 0xe2, 0x3f, 0x1c, 0x70, 0x6f, 0xb8,
	0xc6, 0xe7, 0x10, 0xe4, 0xd4, 0xd5, 0x5c, 0xd1, 0xed, 0xf6, 0xec, 0x0a, 0xdf, 0x2b, 0x79, 0x78,
	0x5d, 0x11, 0x6c, 0xcd, 0x1a, 0xe9, 0xa5, 0x35, 0x53, 0x46, 0xad, 0x63, 0xf7, 0xa4, 0x3b, 0xfa,
	0xe8, 0x5e, 0x24, 0x6b, 0x00, 0x83, 0x43, 0x08, 0xea, 0x24, 0xd8, 0x01, 0xf7, 0x42, 0x66, 0xfd,
	0x1d, 0xf4, 0xa1, 0x75, 0xad, 0xfa, 0x4e, 0xfc, 0x04, 0xda, 0xe6, 0xca, 0x46, 0x47, 0x5c, 0x6a,
	0xb5, 0xaa, 0x75, 0x44, 0x86, 0x99, 0xac, 0x7e, 0x47, 0xbb, 0x13, 0xb2, 0x96, 0x7e, 0x17, 0x1f,
	0x80, 0x47, 0xf7, 0x6e, 0x8c, 0x3c, 0x34, 0x23, 0x1f, 0x30, 0xf0, 0x2f, 0xd2, 0x07, 0xc7, 0xf5,
	0x18, 0xda, 0x7a, 0x55, 0xf0, 0x4a, 0xd7, 0x3d, 0x53, 0xaa, 0xa5, 0x87, 0x93, 0x55, 0xc1, 0x19,
	0x39, 0x07, 0x3d, 0x68, 0x1b, 0xcb, 0x94, 0xf8, 0x2a, 0x9f, 0xf7, 0x77, 0x06, 0xbf, 0x3b, 0xe0,
	0xbf, 0xa6, 0x3f, 0xd2, 0x43, 0x1a, 0xf8, 0x8d, 0x8b, 0xf9, 0xad, 0xae, 0xbe, 0x04, 0x95, 0x65,
	0xd6, 0x7e, 0x7d, 0x79, 0x2a, 0xfd, 0x3f, 0xcd, 0xd9, 0xf8, 0xf1, 0x0b, 0xe8, 0x24, 0xa9, 0xed,
	0xe3, 0x2e, 0xf5, 0x11, 0x36, 0xc5, 0xb1, 0xda, 0x35, 0x38, 0x87, 0xd0, 0x16, 0x72, 0x43, 0xf2,
	0x09, 0xe8, 0x3f, 0x29, 0xb8, 0xd9, 0x8e, 0x75, 0x8c, 0x05, 0xd8, 0xda, 0xf7, 0x55, 0x0a, 0xb0,
	0x59, 0x5e, 0x0c, 0xc1, 0xfb, 0xe9, 0xcd, 0x32, 0x59, 0xf4, 0x77, 0xb0, 0x07, 0xdd, 0x2b, 0xc5,
	0x13, 0xcd, 0xd5, 0xe4, 0x36, 0x91, 0x7d, 0x07, 0x1f, 0x01, 0x36, 0x5e, 0x10, 0x36, 0xc9, 0xfb,
	0x2d, 0xdc, 0x85, 0xe0, 0x15, 0x2f, 0x4b, 0xa2, 0x5c, 0xdc, 0x87, 0x5e, 0x6d, 0xd5, 0x48, 0x7b,
	0xe6, 0xd3, 0xbf, 0xfa, 0xfc, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x28, 0x7d, 0x3f, 0xbb,
	0x07, 0x00, 0x00,
}
