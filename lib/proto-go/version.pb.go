// Code generated by protoc-gen-go.
// source: version.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VersionRequest struct {
	IncludeDynamic bool `protobuf:"varint,1,opt,name=include_dynamic,json=includeDynamic" json:"include_dynamic,omitempty"`
}

func (m *VersionRequest) Reset()                    { *m = VersionRequest{} }
func (m *VersionRequest) String() string            { return proto1.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()               {}
func (*VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type VersionResponse struct {
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Uptime  int32  `protobuf:"varint,2,opt,name=uptime" json:"uptime,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (m *VersionResponse) String() string            { return proto1.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func init() {
	proto1.RegisterType((*VersionRequest)(nil), "proto.VersionRequest")
	proto1.RegisterType((*VersionResponse)(nil), "proto.VersionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Version service

type VersionClient interface {
	GetVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	WatchVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (Version_WatchVersionClient, error)
}

type versionClient struct {
	cc *grpc.ClientConn
}

func NewVersionClient(cc *grpc.ClientConn) VersionClient {
	return &versionClient{cc}
}

func (c *versionClient) GetVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := grpc.Invoke(ctx, "/proto.Version/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionClient) WatchVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (Version_WatchVersionClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Version_serviceDesc.Streams[0], c.cc, "/proto.Version/WatchVersion", opts...)
	if err != nil {
		return nil, err
	}
	x := &versionWatchVersionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Version_WatchVersionClient interface {
	Recv() (*VersionResponse, error)
	grpc.ClientStream
}

type versionWatchVersionClient struct {
	grpc.ClientStream
}

func (x *versionWatchVersionClient) Recv() (*VersionResponse, error) {
	m := new(VersionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Version service

type VersionServer interface {
	GetVersion(context.Context, *VersionRequest) (*VersionResponse, error)
	WatchVersion(*VersionRequest, Version_WatchVersionServer) error
}

func RegisterVersionServer(s *grpc.Server, srv VersionServer) {
	s.RegisterService(&_Version_serviceDesc, srv)
}

func _Version_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Version/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServer).GetVersion(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Version_WatchVersion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VersionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VersionServer).WatchVersion(m, &versionWatchVersionServer{stream})
}

type Version_WatchVersionServer interface {
	Send(*VersionResponse) error
	grpc.ServerStream
}

type versionWatchVersionServer struct {
	grpc.ServerStream
}

func (x *versionWatchVersionServer) Send(m *VersionResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Version_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Version",
	HandlerType: (*VersionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _Version_GetVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchVersion",
			Handler:       _Version_WatchVersion_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor3,
}

func init() { proto1.RegisterFile("version.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4b, 0x2d, 0x2a,
	0xce, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x96, 0x5c,
	0x7c, 0x61, 0x10, 0xf1, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x75, 0x2e, 0xfe, 0xcc,
	0xbc, 0xe4, 0x9c, 0xd2, 0x94, 0xd4, 0xf8, 0x94, 0xca, 0xbc, 0xc4, 0xdc, 0xcc, 0x64, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0x8e, 0x20, 0x3e, 0xa8, 0xb0, 0x0b, 0x44, 0x54, 0xc9, 0x99, 0x8b, 0x1f, 0xae,
	0xb5, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x82, 0x8b, 0x1d, 0x6a, 0x0b, 0x58, 0x0f, 0x67,
	0x10, 0x8c, 0x2b, 0x24, 0xc6, 0xc5, 0x56, 0x5a, 0x50, 0x92, 0x99, 0x9b, 0x2a, 0xc1, 0x04, 0x94,
	0x60, 0x0d, 0x82, 0xf2, 0x8c, 0xba, 0x19, 0xb9, 0xd8, 0xa1, 0xa6, 0x08, 0xd9, 0x72, 0x71, 0xb9,
	0xa7, 0x96, 0xc0, 0x78, 0xa2, 0x10, 0x87, 0xea, 0xa1, 0x3a, 0x4f, 0x4a, 0x0c, 0x5d, 0x18, 0x62,
	0xb5, 0x12, 0x83, 0x90, 0x23, 0x17, 0x4f, 0x78, 0x62, 0x49, 0x72, 0x06, 0xb9, 0x06, 0x18, 0x30,
	0x26, 0xb1, 0x81, 0xa5, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x35, 0x5c, 0x61, 0x2c,
	0x01, 0x00, 0x00,
}
