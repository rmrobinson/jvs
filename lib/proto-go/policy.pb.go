// Code generated by protoc-gen-go.
// source: policy.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ExecutionContext_Priority int32

const (
	ExecutionContext_HIGH   ExecutionContext_Priority = 0
	ExecutionContext_MEDIUM ExecutionContext_Priority = 1
	ExecutionContext_LOW    ExecutionContext_Priority = 2
)

var ExecutionContext_Priority_name = map[int32]string{
	0: "HIGH",
	1: "MEDIUM",
	2: "LOW",
}
var ExecutionContext_Priority_value = map[string]int32{
	"HIGH":   0,
	"MEDIUM": 1,
	"LOW":    2,
}

func (x ExecutionContext_Priority) String() string {
	return proto1.EnumName(ExecutionContext_Priority_name, int32(x))
}
func (ExecutionContext_Priority) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

type Condition_LogicalOperator int32

const (
	Condition_AND Condition_LogicalOperator = 0
	Condition_OR  Condition_LogicalOperator = 1
)

var Condition_LogicalOperator_name = map[int32]string{
	0: "AND",
	1: "OR",
}
var Condition_LogicalOperator_value = map[string]int32{
	"AND": 0,
	"OR":  1,
}

func (x Condition_LogicalOperator) String() string {
	return proto1.EnumName(Condition_LogicalOperator_name, int32(x))
}
func (Condition_LogicalOperator) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{1, 0} }

type Condition_ComparisonOperator int32

const (
	Condition_EQUALS                  Condition_ComparisonOperator = 0
	Condition_NOT_EQUALS              Condition_ComparisonOperator = 1
	Condition_GREATER_THAN            Condition_ComparisonOperator = 2
	Condition_GREATHER_THAN_EQUALS_TO Condition_ComparisonOperator = 3
	Condition_LESS_THAN               Condition_ComparisonOperator = 4
	Condition_LESS_THAN_EQUALS_TO     Condition_ComparisonOperator = 5
	Condition_CONTAINS                Condition_ComparisonOperator = 10
)

var Condition_ComparisonOperator_name = map[int32]string{
	0:  "EQUALS",
	1:  "NOT_EQUALS",
	2:  "GREATER_THAN",
	3:  "GREATHER_THAN_EQUALS_TO",
	4:  "LESS_THAN",
	5:  "LESS_THAN_EQUALS_TO",
	10: "CONTAINS",
}
var Condition_ComparisonOperator_value = map[string]int32{
	"EQUALS":                  0,
	"NOT_EQUALS":              1,
	"GREATER_THAN":            2,
	"GREATHER_THAN_EQUALS_TO": 3,
	"LESS_THAN":               4,
	"LESS_THAN_EQUALS_TO":     5,
	"CONTAINS":                10,
}

func (x Condition_ComparisonOperator) String() string {
	return proto1.EnumName(Condition_ComparisonOperator_name, int32(x))
}
func (Condition_ComparisonOperator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor3, []int{1, 1}
}

type Policy_Type int32

const (
	Policy_TRANSIENT  Policy_Type = 0
	Policy_PERSISTENT Policy_Type = 1
)

var Policy_Type_name = map[int32]string{
	0: "TRANSIENT",
	1: "PERSISTENT",
}
var Policy_Type_value = map[string]int32{
	"TRANSIENT":  0,
	"PERSISTENT": 1,
}

func (x Policy_Type) String() string {
	return proto1.EnumName(Policy_Type_name, int32(x))
}
func (Policy_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{3, 0} }

type WatchPoliciesResponse_Action int32

const (
	WatchPoliciesResponse_ADDED   WatchPoliciesResponse_Action = 0
	WatchPoliciesResponse_CHANGED WatchPoliciesResponse_Action = 1
	WatchPoliciesResponse_REMOVED WatchPoliciesResponse_Action = 2
)

var WatchPoliciesResponse_Action_name = map[int32]string{
	0: "ADDED",
	1: "CHANGED",
	2: "REMOVED",
}
var WatchPoliciesResponse_Action_value = map[string]int32{
	"ADDED":   0,
	"CHANGED": 1,
	"REMOVED": 2,
}

func (x WatchPoliciesResponse_Action) String() string {
	return proto1.EnumName(WatchPoliciesResponse_Action_name, int32(x))
}
func (WatchPoliciesResponse_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor3, []int{13, 0}
}

type ExecutionContext struct {
	// The context of the user executing the policy which is currently active.
	// Should allow the action to perform operations on other endpoints.
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	// The time this condition was triggered.
	TriggeredAt uint64 `protobuf:"varint,2,opt,name=triggered_at,json=triggeredAt" json:"triggered_at,omitempty"`
	// A potential option for us to filter low-priority things?
	Priority ExecutionContext_Priority `protobuf:"varint,3,opt,name=priority,enum=proto.ExecutionContext_Priority" json:"priority,omitempty"`
	// Generic object to store things.
	// TODO: how do we set context?
	Context map[string]string `protobuf:"bytes,100,rep,name=context" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ExecutionContext) Reset()                    { *m = ExecutionContext{} }
func (m *ExecutionContext) String() string            { return proto1.CompactTextString(m) }
func (*ExecutionContext) ProtoMessage()               {}
func (*ExecutionContext) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *ExecutionContext) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ExecutionContext) GetContext() map[string]string {
	if m != nil {
		return m.Context
	}
	return nil
}

type Condition struct {
	Operator   Condition_LogicalOperator `protobuf:"varint,1,opt,name=operator,enum=proto.Condition_LogicalOperator" json:"operator,omitempty"`
	Conditions []*Condition              `protobuf:"bytes,2,rep,name=conditions" json:"conditions,omitempty"`
	// This will define which objects the condition will apply to.
	// For example, this could be a Device message.
	Target *google_protobuf.Any `protobuf:"bytes,10,opt,name=target" json:"target,omitempty"`
	// This will be one of the various <x> messages defined elsewhere.
	// Strictly speaking, it should be either an object of type target, above,
	// or a child object of this object.
	// For example, this could be a DeviceState message.
	Check *google_protobuf.Any `protobuf:"bytes,11,opt,name=check" json:"check,omitempty"`
	// This will define how we will evaluate the properties in check which are set
	// with the current state of the object.
	// For example, if check is a DeviceState message and both isOn and level are set,
	// we will enforce that the current state of the target device satisfies whichever
	// comparison operator is specified on both isOn and level.
	// If the type is one which doesn't fit into the comparison, i.e. a boolean can't
	// be greater than a boolean, we'll fall back to equality rules.
	// Be careful if check is likely to include floats; equality is likely not what is desired.
	Comparison Condition_ComparisonOperator `protobuf:"varint,12,opt,name=comparison,enum=proto.Condition_ComparisonOperator" json:"comparison,omitempty"`
}

func (m *Condition) Reset()                    { *m = Condition{} }
func (m *Condition) String() string            { return proto1.CompactTextString(m) }
func (*Condition) ProtoMessage()               {}
func (*Condition) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Condition) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Condition) GetTarget() *google_protobuf.Any {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Condition) GetCheck() *google_protobuf.Any {
	if m != nil {
		return m.Check
	}
	return nil
}

type Action struct {
	// This will be one of the various Set<x>Request messages defined elsewhere.
	Command *google_protobuf.Any `protobuf:"bytes,10,opt,name=command" json:"command,omitempty"`
	// This will likely be an <x> message, where x corresponds to the x in the command.
	// For example, the command could be SetDeviceStateRequest message
	// wth the context being a DeviceState message.
	Context *google_protobuf.Any `protobuf:"bytes,11,opt,name=context" json:"context,omitempty"`
}

func (m *Action) Reset()                    { *m = Action{} }
func (m *Action) String() string            { return proto1.CompactTextString(m) }
func (*Action) ProtoMessage()               {}
func (*Action) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *Action) GetCommand() *google_protobuf.Any {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *Action) GetContext() *google_protobuf.Any {
	if m != nil {
		return m.Context
	}
	return nil
}

type Policy struct {
	// Each policy should have a unique ID.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Whether the policy is currently active (only applies to persisten policies).
	IsActive bool `protobuf:"varint,2,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	// An ordering field to resolve execution order rissues.
	Order int32 `protobuf:"varint,3,opt,name=order" json:"order,omitempty"`
	// The type of execution behaviour to expect.
	// Transient policies will execute the actions then wait for the next time
	// these conditions to be met before triggering again.
	// Persistent policies will remain active until conditions are no longer met.
	// Note: if the policy is reloaded and a transient condition meets it's conditions,
	// the actions will be executed again.
	Type Policy_Type `protobuf:"varint,4,opt,name=type,enum=proto.Policy_Type" json:"type,omitempty"`
	// The set of conditions which must be met prior to execution.
	Conditions *Condition `protobuf:"bytes,10,opt,name=conditions" json:"conditions,omitempty"`
	// The collection of actions to execute when the policy is activated.
	Actions []*Action         `protobuf:"bytes,11,rep,name=actions" json:"actions,omitempty"`
	Context map[string]string `protobuf:"bytes,12,rep,name=context" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Policy) Reset()                    { *m = Policy{} }
func (m *Policy) String() string            { return proto1.CompactTextString(m) }
func (*Policy) ProtoMessage()               {}
func (*Policy) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *Policy) GetConditions() *Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Policy) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *Policy) GetContext() map[string]string {
	if m != nil {
		return m.Context
	}
	return nil
}

type GetPoliciesRequest struct {
}

func (m *GetPoliciesRequest) Reset()                    { *m = GetPoliciesRequest{} }
func (m *GetPoliciesRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetPoliciesRequest) ProtoMessage()               {}
func (*GetPoliciesRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

type GetPoliciesResponse struct {
	Policies []*Policy `protobuf:"bytes,1,rep,name=policies" json:"policies,omitempty"`
}

func (m *GetPoliciesResponse) Reset()                    { *m = GetPoliciesResponse{} }
func (m *GetPoliciesResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetPoliciesResponse) ProtoMessage()               {}
func (*GetPoliciesResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *GetPoliciesResponse) GetPolicies() []*Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

type GetPolicyRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetPolicyRequest) Reset()                    { *m = GetPolicyRequest{} }
func (m *GetPolicyRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetPolicyRequest) ProtoMessage()               {}
func (*GetPolicyRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

type GetPolicyResponse struct {
	Id     string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Policy *Policy `protobuf:"bytes,2,opt,name=policy" json:"policy,omitempty"`
}

func (m *GetPolicyResponse) Reset()                    { *m = GetPolicyResponse{} }
func (m *GetPolicyResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetPolicyResponse) ProtoMessage()               {}
func (*GetPolicyResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *GetPolicyResponse) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type AddPolicyRequest struct {
	Policy *Policy `protobuf:"bytes,1,opt,name=policy" json:"policy,omitempty"`
}

func (m *AddPolicyRequest) Reset()                    { *m = AddPolicyRequest{} }
func (m *AddPolicyRequest) String() string            { return proto1.CompactTextString(m) }
func (*AddPolicyRequest) ProtoMessage()               {}
func (*AddPolicyRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *AddPolicyRequest) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type AddPolicyResponse struct {
	Policy *Policy `protobuf:"bytes,1,opt,name=policy" json:"policy,omitempty"`
}

func (m *AddPolicyResponse) Reset()                    { *m = AddPolicyResponse{} }
func (m *AddPolicyResponse) String() string            { return proto1.CompactTextString(m) }
func (*AddPolicyResponse) ProtoMessage()               {}
func (*AddPolicyResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *AddPolicyResponse) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type RemovePolicyRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RemovePolicyRequest) Reset()                    { *m = RemovePolicyRequest{} }
func (m *RemovePolicyRequest) String() string            { return proto1.CompactTextString(m) }
func (*RemovePolicyRequest) ProtoMessage()               {}
func (*RemovePolicyRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

type RemovePolicyResponse struct {
}

func (m *RemovePolicyResponse) Reset()                    { *m = RemovePolicyResponse{} }
func (m *RemovePolicyResponse) String() string            { return proto1.CompactTextString(m) }
func (*RemovePolicyResponse) ProtoMessage()               {}
func (*RemovePolicyResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{11} }

type WatchPoliciesRequest struct {
}

func (m *WatchPoliciesRequest) Reset()                    { *m = WatchPoliciesRequest{} }
func (m *WatchPoliciesRequest) String() string            { return proto1.CompactTextString(m) }
func (*WatchPoliciesRequest) ProtoMessage()               {}
func (*WatchPoliciesRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{12} }

type WatchPoliciesResponse struct {
	Action WatchPoliciesResponse_Action `protobuf:"varint,1,opt,name=action,enum=proto.WatchPoliciesResponse_Action" json:"action,omitempty"`
	Policy *Policy                      `protobuf:"bytes,2,opt,name=policy" json:"policy,omitempty"`
}

func (m *WatchPoliciesResponse) Reset()                    { *m = WatchPoliciesResponse{} }
func (m *WatchPoliciesResponse) String() string            { return proto1.CompactTextString(m) }
func (*WatchPoliciesResponse) ProtoMessage()               {}
func (*WatchPoliciesResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{13} }

func (m *WatchPoliciesResponse) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func init() {
	proto1.RegisterType((*ExecutionContext)(nil), "proto.ExecutionContext")
	proto1.RegisterType((*Condition)(nil), "proto.Condition")
	proto1.RegisterType((*Action)(nil), "proto.Action")
	proto1.RegisterType((*Policy)(nil), "proto.Policy")
	proto1.RegisterType((*GetPoliciesRequest)(nil), "proto.GetPoliciesRequest")
	proto1.RegisterType((*GetPoliciesResponse)(nil), "proto.GetPoliciesResponse")
	proto1.RegisterType((*GetPolicyRequest)(nil), "proto.GetPolicyRequest")
	proto1.RegisterType((*GetPolicyResponse)(nil), "proto.GetPolicyResponse")
	proto1.RegisterType((*AddPolicyRequest)(nil), "proto.AddPolicyRequest")
	proto1.RegisterType((*AddPolicyResponse)(nil), "proto.AddPolicyResponse")
	proto1.RegisterType((*RemovePolicyRequest)(nil), "proto.RemovePolicyRequest")
	proto1.RegisterType((*RemovePolicyResponse)(nil), "proto.RemovePolicyResponse")
	proto1.RegisterType((*WatchPoliciesRequest)(nil), "proto.WatchPoliciesRequest")
	proto1.RegisterType((*WatchPoliciesResponse)(nil), "proto.WatchPoliciesResponse")
	proto1.RegisterEnum("proto.ExecutionContext_Priority", ExecutionContext_Priority_name, ExecutionContext_Priority_value)
	proto1.RegisterEnum("proto.Condition_LogicalOperator", Condition_LogicalOperator_name, Condition_LogicalOperator_value)
	proto1.RegisterEnum("proto.Condition_ComparisonOperator", Condition_ComparisonOperator_name, Condition_ComparisonOperator_value)
	proto1.RegisterEnum("proto.Policy_Type", Policy_Type_name, Policy_Type_value)
	proto1.RegisterEnum("proto.WatchPoliciesResponse_Action", WatchPoliciesResponse_Action_name, WatchPoliciesResponse_Action_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for PolicyManager service

type PolicyManagerClient interface {
	GetPolicies(ctx context.Context, in *GetPoliciesRequest, opts ...grpc.CallOption) (*GetPoliciesResponse, error)
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	AddPolicy(ctx context.Context, in *AddPolicyRequest, opts ...grpc.CallOption) (*AddPolicyResponse, error)
	RemovePolicy(ctx context.Context, in *RemovePolicyRequest, opts ...grpc.CallOption) (*RemovePolicyResponse, error)
	WatchPolicies(ctx context.Context, in *WatchPoliciesRequest, opts ...grpc.CallOption) (PolicyManager_WatchPoliciesClient, error)
}

type policyManagerClient struct {
	cc *grpc.ClientConn
}

func NewPolicyManagerClient(cc *grpc.ClientConn) PolicyManagerClient {
	return &policyManagerClient{cc}
}

func (c *policyManagerClient) GetPolicies(ctx context.Context, in *GetPoliciesRequest, opts ...grpc.CallOption) (*GetPoliciesResponse, error) {
	out := new(GetPoliciesResponse)
	err := grpc.Invoke(ctx, "/proto.PolicyManager/GetPolicies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	out := new(GetPolicyResponse)
	err := grpc.Invoke(ctx, "/proto.PolicyManager/GetPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) AddPolicy(ctx context.Context, in *AddPolicyRequest, opts ...grpc.CallOption) (*AddPolicyResponse, error) {
	out := new(AddPolicyResponse)
	err := grpc.Invoke(ctx, "/proto.PolicyManager/AddPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) RemovePolicy(ctx context.Context, in *RemovePolicyRequest, opts ...grpc.CallOption) (*RemovePolicyResponse, error) {
	out := new(RemovePolicyResponse)
	err := grpc.Invoke(ctx, "/proto.PolicyManager/RemovePolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) WatchPolicies(ctx context.Context, in *WatchPoliciesRequest, opts ...grpc.CallOption) (PolicyManager_WatchPoliciesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PolicyManager_serviceDesc.Streams[0], c.cc, "/proto.PolicyManager/WatchPolicies", opts...)
	if err != nil {
		return nil, err
	}
	x := &policyManagerWatchPoliciesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PolicyManager_WatchPoliciesClient interface {
	Recv() (*WatchPoliciesResponse, error)
	grpc.ClientStream
}

type policyManagerWatchPoliciesClient struct {
	grpc.ClientStream
}

func (x *policyManagerWatchPoliciesClient) Recv() (*WatchPoliciesResponse, error) {
	m := new(WatchPoliciesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PolicyManager service

type PolicyManagerServer interface {
	GetPolicies(context.Context, *GetPoliciesRequest) (*GetPoliciesResponse, error)
	GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error)
	AddPolicy(context.Context, *AddPolicyRequest) (*AddPolicyResponse, error)
	RemovePolicy(context.Context, *RemovePolicyRequest) (*RemovePolicyResponse, error)
	WatchPolicies(*WatchPoliciesRequest, PolicyManager_WatchPoliciesServer) error
}

func RegisterPolicyManagerServer(s *grpc.Server, srv PolicyManagerServer) {
	s.RegisterService(&_PolicyManager_serviceDesc, srv)
}

func _PolicyManager_GetPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).GetPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PolicyManager/GetPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).GetPolicies(ctx, req.(*GetPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PolicyManager/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).GetPolicy(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_AddPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).AddPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PolicyManager/AddPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).AddPolicy(ctx, req.(*AddPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_RemovePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).RemovePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PolicyManager/RemovePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).RemovePolicy(ctx, req.(*RemovePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_WatchPolicies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchPoliciesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PolicyManagerServer).WatchPolicies(m, &policyManagerWatchPoliciesServer{stream})
}

type PolicyManager_WatchPoliciesServer interface {
	Send(*WatchPoliciesResponse) error
	grpc.ServerStream
}

type policyManagerWatchPoliciesServer struct {
	grpc.ServerStream
}

func (x *policyManagerWatchPoliciesServer) Send(m *WatchPoliciesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PolicyManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PolicyManager",
	HandlerType: (*PolicyManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPolicies",
			Handler:    _PolicyManager_GetPolicies_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _PolicyManager_GetPolicy_Handler,
		},
		{
			MethodName: "AddPolicy",
			Handler:    _PolicyManager_AddPolicy_Handler,
		},
		{
			MethodName: "RemovePolicy",
			Handler:    _PolicyManager_RemovePolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchPolicies",
			Handler:       _PolicyManager_WatchPolicies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor3,
}

func init() { proto1.RegisterFile("policy.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 913 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0x5b, 0x72, 0xe3, 0x44,
	0x14, 0x8d, 0xe4, 0x47, 0xec, 0x6b, 0x67, 0xd0, 0x74, 0x02, 0xd1, 0x38, 0x54, 0x11, 0x04, 0xe1,
	0x55, 0xa0, 0x99, 0x0a, 0x7c, 0x40, 0xa0, 0xa8, 0x51, 0x39, 0x22, 0x31, 0x95, 0xd8, 0xa1, 0xad,
	0x30, 0x9f, 0x2e, 0x8d, 0xdc, 0x38, 0xaa, 0x49, 0x24, 0x21, 0xb5, 0x53, 0xe3, 0x85, 0xb0, 0x09,
	0xb6, 0xc0, 0x3e, 0xd8, 0x02, 0x3b, 0xe0, 0x9b, 0x7e, 0x49, 0x91, 0x65, 0xe3, 0x9a, 0x8f, 0xf9,
	0xb2, 0x6e, 0xdf, 0x73, 0x1f, 0xe7, 0xde, 0xd3, 0x6d, 0xe8, 0x26, 0xf1, 0x6d, 0x18, 0x2c, 0xec,
	0x24, 0x8d, 0x69, 0x8c, 0x1a, 0xe2, 0xa7, 0xf7, 0x64, 0x16, 0xc7, 0xb3, 0x5b, 0xf2, 0x54, 0x58,
	0x2f, 0xe7, 0xbf, 0x3d, 0xf5, 0x23, 0x85, 0xe8, 0xc1, 0x3c, 0x23, 0xa9, 0xfc, 0xb6, 0xfe, 0xd2,
	0xc1, 0x70, 0x5f, 0x93, 0x60, 0x4e, 0xc3, 0x38, 0xea, 0xc7, 0x11, 0x25, 0xaf, 0x29, 0xfa, 0x00,
	0xea, 0x1c, 0x62, 0x6a, 0x87, 0xda, 0x67, 0x9d, 0xe3, 0x8e, 0x84, 0xda, 0xd7, 0xec, 0x08, 0x0b,
	0x07, 0xfa, 0x10, 0xba, 0x34, 0x0d, 0x67, 0x33, 0x92, 0x92, 0xe9, 0xc4, 0xa7, 0xa6, 0xce, 0x80,
	0x75, 0xdc, 0x29, 0xce, 0x1c, 0x8a, 0x7e, 0x80, 0x56, 0x92, 0x86, 0x71, 0x1a, 0xd2, 0x85, 0x59,
	0x63, 0xee, 0x47, 0xc7, 0x87, 0x2a, 0x4f, 0xb5, 0x9c, 0x7d, 0xa5, 0x70, 0xb8, 0x88, 0x40, 0x3f,
	0xc2, 0x76, 0x20, 0xbd, 0xe6, 0xf4, 0xb0, 0xc6, 0x9a, 0xf8, 0xf8, 0xff, 0x82, 0xd5, 0xaf, 0x1b,
	0xd1, 0x74, 0x81, 0xf3, 0xa0, 0xde, 0x09, 0x74, 0xcb, 0x0e, 0x64, 0x40, 0xed, 0x15, 0x59, 0x08,
	0x42, 0x6d, 0xcc, 0x3f, 0xd1, 0x1e, 0x34, 0xee, 0xfd, 0xdb, 0x39, 0x11, 0xbd, 0xb7, 0xb1, 0x34,
	0x4e, 0xf4, 0x6f, 0x35, 0xeb, 0x73, 0x68, 0xe5, 0x1d, 0xa1, 0x16, 0xd4, 0xcf, 0x07, 0x67, 0xe7,
	0xc6, 0x16, 0x02, 0x68, 0x5e, 0xba, 0xa7, 0x83, 0xeb, 0x4b, 0x43, 0x43, 0xdb, 0x50, 0xbb, 0x18,
	0xbd, 0x30, 0x74, 0xeb, 0xef, 0x1a, 0xb4, 0x59, 0x9d, 0x69, 0xc8, 0x3b, 0xe2, 0x94, 0xe3, 0x84,
	0xa4, 0x3e, 0x8d, 0xe5, 0xe8, 0x1e, 0x28, 0x17, 0x18, 0xfb, 0x22, 0x9e, 0x85, 0x81, 0x7f, 0x3b,
	0x52, 0x38, 0x5c, 0x44, 0xa0, 0x67, 0x00, 0x41, 0x0e, 0xcb, 0x58, 0x57, 0x9c, 0xb5, 0x51, 0x8d,
	0xc7, 0x25, 0x0c, 0xfa, 0x12, 0x9a, 0xd4, 0x4f, 0x67, 0x84, 0x9a, 0x20, 0x16, 0xb5, 0x67, 0xcb,
	0x9d, 0xdb, 0xf9, 0xce, 0x6d, 0x27, 0x5a, 0x60, 0x85, 0x41, 0x5f, 0x40, 0x23, 0xb8, 0x21, 0xc1,
	0x2b, 0xb3, 0xb3, 0x01, 0x2c, 0x21, 0xa8, 0xcf, 0x7b, 0xb9, 0x4b, 0xfc, 0x34, 0xcc, 0xe2, 0xc8,
	0xec, 0x0a, 0x2e, 0x1f, 0xad, 0x70, 0xe9, 0x17, 0x90, 0x82, 0x4e, 0x29, 0xcc, 0xb2, 0xe0, 0x9d,
	0x0a, 0x5b, 0x3e, 0x38, 0x67, 0x78, 0xca, 0xa6, 0xd9, 0x04, 0x7d, 0x84, 0x0d, 0xcd, 0xfa, 0x43,
	0x03, 0xb4, 0x9a, 0x86, 0x0f, 0xdb, 0xfd, 0xe5, 0xda, 0xb9, 0x18, 0x33, 0xe8, 0x23, 0x80, 0xe1,
	0xc8, 0x9b, 0x28, 0x5b, 0x63, 0xab, 0xec, 0x9e, 0x61, 0xd7, 0xf1, 0x5c, 0x3c, 0xf1, 0xce, 0x9d,
	0xa1, 0xa1, 0xa3, 0x03, 0xd8, 0x17, 0x27, 0xe7, 0xea, 0x48, 0x61, 0x27, 0xde, 0xc8, 0xa8, 0xa1,
	0x1d, 0x68, 0x5f, 0xb8, 0xe3, 0xb1, 0xc4, 0xd6, 0xd1, 0x3e, 0xec, 0x16, 0x66, 0x09, 0xd7, 0x40,
	0x5d, 0x68, 0xf5, 0x47, 0x43, 0xcf, 0x19, 0x0c, 0xc7, 0x06, 0x58, 0x37, 0xd0, 0x74, 0x02, 0xb1,
	0x54, 0x9b, 0x2b, 0xf1, 0xee, 0xce, 0x8f, 0xa6, 0x1b, 0xa7, 0x9c, 0x83, 0x24, 0x5e, 0x2a, 0xb7,
	0xb3, 0x19, 0x2f, 0x40, 0xd6, 0x3f, 0x3a, 0x34, 0xaf, 0xc4, 0xfd, 0x65, 0x4c, 0xf5, 0x70, 0xaa,
	0x34, 0xca, 0xbe, 0x18, 0xaf, 0x76, 0x98, 0x4d, 0x7c, 0xd6, 0xc7, 0xbd, 0x94, 0x69, 0x0b, 0xb7,
	0xc2, 0xcc, 0x11, 0x36, 0xd7, 0x6f, 0x9c, 0x4e, 0xd9, 0x25, 0xe5, 0x97, 0xab, 0x81, 0xa5, 0x81,
	0x3e, 0x81, 0x3a, 0x5d, 0x24, 0xc4, 0xac, 0x8b, 0x95, 0x21, 0xb5, 0x32, 0x99, 0xdf, 0xf6, 0x98,
	0x07, 0x0b, 0x7f, 0x45, 0x6c, 0x92, 0xd8, 0x66, 0xb1, 0x7d, 0x0a, 0xdb, 0x7e, 0x20, 0xe1, 0x1d,
	0xa1, 0xcd, 0x1d, 0x05, 0x97, 0x73, 0xc2, 0xb9, 0x17, 0x7d, 0xf3, 0x30, 0x80, 0xae, 0x00, 0xf6,
	0x96, 0xbb, 0x78, 0xfb, 0x17, 0xf6, 0x08, 0xea, 0x9c, 0x1a, 0x5f, 0xb5, 0x87, 0x9d, 0xe1, 0x78,
	0xe0, 0x0e, 0x3d, 0x29, 0x9c, 0x2b, 0x17, 0x8f, 0x07, 0x63, 0x8f, 0xdb, 0x9a, 0xb5, 0x07, 0xe8,
	0x8c, 0x50, 0xd1, 0x45, 0x48, 0x32, 0x4c, 0x7e, 0x9f, 0x93, 0x8c, 0x5a, 0xcf, 0x61, 0x77, 0xe9,
	0x34, 0x4b, 0x18, 0x09, 0x82, 0xd8, 0x23, 0x90, 0xa8, 0x33, 0xd6, 0x44, 0x99, 0xaf, 0xa4, 0x81,
	0x0b, 0x37, 0xd3, 0xb9, 0x91, 0x67, 0x58, 0xa8, 0xac, 0xd5, 0x55, 0x5a, 0x3f, 0xc3, 0xe3, 0x12,
	0x46, 0xd5, 0xa8, 0xee, 0xfb, 0x08, 0x9a, 0xf2, 0x25, 0x17, 0x14, 0x57, 0x2a, 0x2a, 0xa7, 0xf5,
	0x1d, 0x18, 0xce, 0x74, 0xba, 0x5c, 0xef, 0x21, 0x54, 0xdb, 0x14, 0x7a, 0x02, 0x8f, 0x4b, 0xa1,
	0xaa, 0x8d, 0x37, 0x8c, 0x3d, 0x82, 0x5d, 0x4c, 0xee, 0xe2, 0x7b, 0xb2, 0x99, 0xe9, 0x7b, 0xb0,
	0xb7, 0x0c, 0x93, 0x55, 0xf8, 0xf9, 0x0b, 0x9f, 0x06, 0x37, 0xd5, 0xf9, 0xff, 0xa9, 0xc1, 0xbb,
	0x15, 0x87, 0xea, 0xeb, 0x7b, 0x68, 0x4a, 0x4d, 0xa9, 0xc7, 0x34, 0x7f, 0x80, 0xd6, 0xa2, 0x73,
	0x19, 0xaa, 0x90, 0x37, 0x9d, 0xe5, 0x57, 0xc5, 0x3d, 0x6f, 0x43, 0xc3, 0x39, 0x3d, 0x75, 0xf9,
	0xe3, 0xd4, 0x81, 0xed, 0x3e, 0x7b, 0x1e, 0xce, 0x98, 0xa1, 0x71, 0x03, 0xbb, 0x97, 0xa3, 0x5f,
	0x99, 0xa1, 0x1f, 0xff, 0xab, 0xc3, 0x8e, 0xcc, 0x70, 0xe9, 0x47, 0x3e, 0xfb, 0xab, 0x43, 0x3f,
	0x41, 0xa7, 0x24, 0x1f, 0xf4, 0x44, 0x95, 0x59, 0x15, 0x5a, 0xaf, 0xb7, 0xce, 0xa5, 0x86, 0xb3,
	0x85, 0x9e, 0x43, 0xbb, 0x10, 0x08, 0xda, 0xaf, 0x40, 0xf3, 0x61, 0xf7, 0xcc, 0x55, 0x47, 0x39,
	0x43, 0xb1, 0xdb, 0x22, 0x43, 0x55, 0x28, 0x45, 0x86, 0x15, 0x19, 0xb0, 0x0c, 0x03, 0xe8, 0x96,
	0x57, 0x87, 0xf2, 0x8e, 0xd7, 0xac, 0xbd, 0x77, 0xb0, 0xd6, 0x57, 0xa4, 0x1a, 0xc2, 0xce, 0xd2,
	0x9a, 0xd0, 0xc1, 0xfa, 0xe5, 0xc9, 0x64, 0xef, 0x6f, 0xda, 0xac, 0xb5, 0xf5, 0x4c, 0x7b, 0xd9,
	0x14, 0x80, 0xaf, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xae, 0xc7, 0x58, 0x2e, 0xeb, 0x08, 0x00,
	0x00,
}
